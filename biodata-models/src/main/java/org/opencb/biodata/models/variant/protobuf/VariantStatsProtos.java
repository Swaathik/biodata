// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VariantStats.proto

package org.opencb.biodata.models.variant.protobuf;

public final class VariantStatsProtos {
  private VariantStatsProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface VariantStatsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 ref_allele_count = 1;
    /**
     * <code>required int32 ref_allele_count = 1;</code>
     */
    boolean hasRefAlleleCount();
    /**
     * <code>required int32 ref_allele_count = 1;</code>
     */
    int getRefAlleleCount();

    // required int32 alt_allele_count = 2;
    /**
     * <code>required int32 alt_allele_count = 2;</code>
     */
    boolean hasAltAlleleCount();
    /**
     * <code>required int32 alt_allele_count = 2;</code>
     */
    int getAltAlleleCount();

    // repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count> 
        getGenotypesCountList();
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count getGenotypesCount(int index);
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    int getGenotypesCountCount();
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    java.util.List<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder> 
        getGenotypesCountOrBuilderList();
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder getGenotypesCountOrBuilder(
        int index);

    // required float ref_allele_freq = 4;
    /**
     * <code>required float ref_allele_freq = 4;</code>
     */
    boolean hasRefAlleleFreq();
    /**
     * <code>required float ref_allele_freq = 4;</code>
     */
    float getRefAlleleFreq();

    // required float alt_allele_freq = 5;
    /**
     * <code>required float alt_allele_freq = 5;</code>
     */
    boolean hasAltAlleleFreq();
    /**
     * <code>required float alt_allele_freq = 5;</code>
     */
    float getAltAlleleFreq();

    // repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency> 
        getGenotypesFreqList();
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency getGenotypesFreq(int index);
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    int getGenotypesFreqCount();
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    java.util.List<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder> 
        getGenotypesFreqOrBuilderList();
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder getGenotypesFreqOrBuilder(
        int index);

    // required int32 missing_alleles = 7;
    /**
     * <code>required int32 missing_alleles = 7;</code>
     *
     * <pre>
     * Number of alleles whose information is missing 
     * </pre>
     */
    boolean hasMissingAlleles();
    /**
     * <code>required int32 missing_alleles = 7;</code>
     *
     * <pre>
     * Number of alleles whose information is missing 
     * </pre>
     */
    int getMissingAlleles();

    // required int32 missing_genotypes = 8;
    /**
     * <code>required int32 missing_genotypes = 8;</code>
     *
     * <pre>
     * Number of genotypes with at least one allele missing 
     * </pre>
     */
    boolean hasMissingGenotypes();
    /**
     * <code>required int32 missing_genotypes = 8;</code>
     *
     * <pre>
     * Number of genotypes with at least one allele missing 
     * </pre>
     */
    int getMissingGenotypes();

    // required float maf = 9;
    /**
     * <code>required float maf = 9;</code>
     *
     * <pre>
     * Minor allele frequency 
     * </pre>
     */
    boolean hasMaf();
    /**
     * <code>required float maf = 9;</code>
     *
     * <pre>
     * Minor allele frequency 
     * </pre>
     */
    float getMaf();

    // required float mgf = 10;
    /**
     * <code>required float mgf = 10;</code>
     *
     * <pre>
     * Minor genotype frequency 
     * </pre>
     */
    boolean hasMgf();
    /**
     * <code>required float mgf = 10;</code>
     *
     * <pre>
     * Minor genotype frequency 
     * </pre>
     */
    float getMgf();

    // required string mafAllele = 11;
    /**
     * <code>required string mafAllele = 11;</code>
     *
     * <pre>
     * Allele with minor allele frequency 
     * </pre>
     */
    boolean hasMafAllele();
    /**
     * <code>required string mafAllele = 11;</code>
     *
     * <pre>
     * Allele with minor allele frequency 
     * </pre>
     */
    java.lang.String getMafAllele();
    /**
     * <code>required string mafAllele = 11;</code>
     *
     * <pre>
     * Allele with minor allele frequency 
     * </pre>
     */
    com.google.protobuf.ByteString
        getMafAlleleBytes();

    // required string mgfGenotype = 12;
    /**
     * <code>required string mgfGenotype = 12;</code>
     *
     * <pre>
     * Genotype with minor genotype frequency 
     * </pre>
     */
    boolean hasMgfGenotype();
    /**
     * <code>required string mgfGenotype = 12;</code>
     *
     * <pre>
     * Genotype with minor genotype frequency 
     * </pre>
     */
    java.lang.String getMgfGenotype();
    /**
     * <code>required string mgfGenotype = 12;</code>
     *
     * <pre>
     * Genotype with minor genotype frequency 
     * </pre>
     */
    com.google.protobuf.ByteString
        getMgfGenotypeBytes();

    // required bool passed_filters = 13;
    /**
     * <code>required bool passed_filters = 13;</code>
     */
    boolean hasPassedFilters();
    /**
     * <code>required bool passed_filters = 13;</code>
     */
    boolean getPassedFilters();

    // required float quality = 14;
    /**
     * <code>required float quality = 14;</code>
     */
    boolean hasQuality();
    /**
     * <code>required float quality = 14;</code>
     */
    float getQuality();

    // required int32 num_samples = 15;
    /**
     * <code>required int32 num_samples = 15;</code>
     */
    boolean hasNumSamples();
    /**
     * <code>required int32 num_samples = 15;</code>
     */
    int getNumSamples();

    // required int32 transitions_count = 16;
    /**
     * <code>required int32 transitions_count = 16;</code>
     */
    boolean hasTransitionsCount();
    /**
     * <code>required int32 transitions_count = 16;</code>
     */
    int getTransitionsCount();

    // required int32 transversions_count = 17;
    /**
     * <code>required int32 transversions_count = 17;</code>
     */
    boolean hasTransversionsCount();
    /**
     * <code>required int32 transversions_count = 17;</code>
     */
    int getTransversionsCount();

    // optional int32 mendelian_errors = 18;
    /**
     * <code>optional int32 mendelian_errors = 18;</code>
     *
     * <pre>
     * Number of mendelian errors found 
     * </pre>
     */
    boolean hasMendelianErrors();
    /**
     * <code>optional int32 mendelian_errors = 18;</code>
     *
     * <pre>
     * Number of mendelian errors found 
     * </pre>
     */
    int getMendelianErrors();

    // optional float cases_percent_dominant = 19;
    /**
     * <code>optional float cases_percent_dominant = 19;</code>
     *
     * <pre>
     * Percentage of cases that follow a dominant inheritance pattern 
     * </pre>
     */
    boolean hasCasesPercentDominant();
    /**
     * <code>optional float cases_percent_dominant = 19;</code>
     *
     * <pre>
     * Percentage of cases that follow a dominant inheritance pattern 
     * </pre>
     */
    float getCasesPercentDominant();

    // optional float controls_percent_dominant = 20;
    /**
     * <code>optional float controls_percent_dominant = 20;</code>
     *
     * <pre>
     * Percentage of controls that follow a dominant inheritance pattern 
     * </pre>
     */
    boolean hasControlsPercentDominant();
    /**
     * <code>optional float controls_percent_dominant = 20;</code>
     *
     * <pre>
     * Percentage of controls that follow a dominant inheritance pattern 
     * </pre>
     */
    float getControlsPercentDominant();

    // optional float cases_percent_recessive = 21;
    /**
     * <code>optional float cases_percent_recessive = 21;</code>
     *
     * <pre>
     * Percentage of cases that follow a recessive inheritance pattern 
     * </pre>
     */
    boolean hasCasesPercentRecessive();
    /**
     * <code>optional float cases_percent_recessive = 21;</code>
     *
     * <pre>
     * Percentage of cases that follow a recessive inheritance pattern 
     * </pre>
     */
    float getCasesPercentRecessive();

    // optional float controls_percent_recessive = 22;
    /**
     * <code>optional float controls_percent_recessive = 22;</code>
     *
     * <pre>
     * Percentage of controls that follow a recessive inheritance pattern 
     * </pre>
     */
    boolean hasControlsPercentRecessive();
    /**
     * <code>optional float controls_percent_recessive = 22;</code>
     *
     * <pre>
     * Percentage of controls that follow a recessive inheritance pattern 
     * </pre>
     */
    float getControlsPercentRecessive();

    // optional float hardy_weinberg = 23;
    /**
     * <code>optional float hardy_weinberg = 23;</code>
     *
     * <pre>
     * All samples Hardy-Weinberg stats
     * </pre>
     */
    boolean hasHardyWeinberg();
    /**
     * <code>optional float hardy_weinberg = 23;</code>
     *
     * <pre>
     * All samples Hardy-Weinberg stats
     * </pre>
     */
    float getHardyWeinberg();
  }
  /**
   * Protobuf type {@code org.opencb.biodata.models.variant.protobuf.VariantStats}
   */
  public static final class VariantStats extends
      com.google.protobuf.GeneratedMessage
      implements VariantStatsOrBuilder {
    // Use VariantStats.newBuilder() to construct.
    private VariantStats(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VariantStats(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VariantStats defaultInstance;
    public static VariantStats getDefaultInstance() {
      return defaultInstance;
    }

    public VariantStats getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VariantStats(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              refAlleleCount_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              altAlleleCount_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                genotypesCount_ = new java.util.ArrayList<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count>();
                mutable_bitField0_ |= 0x00000004;
              }
              genotypesCount_.add(input.readMessage(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.PARSER, extensionRegistry));
              break;
            }
            case 37: {
              bitField0_ |= 0x00000004;
              refAlleleFreq_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000008;
              altAlleleFreq_ = input.readFloat();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                genotypesFreq_ = new java.util.ArrayList<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency>();
                mutable_bitField0_ |= 0x00000020;
              }
              genotypesFreq_.add(input.readMessage(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              missingAlleles_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              missingGenotypes_ = input.readInt32();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000040;
              maf_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000080;
              mgf_ = input.readFloat();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000100;
              mafAllele_ = input.readBytes();
              break;
            }
            case 98: {
              bitField0_ |= 0x00000200;
              mgfGenotype_ = input.readBytes();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000400;
              passedFilters_ = input.readBool();
              break;
            }
            case 117: {
              bitField0_ |= 0x00000800;
              quality_ = input.readFloat();
              break;
            }
            case 120: {
              bitField0_ |= 0x00001000;
              numSamples_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00002000;
              transitionsCount_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00004000;
              transversionsCount_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00008000;
              mendelianErrors_ = input.readInt32();
              break;
            }
            case 157: {
              bitField0_ |= 0x00010000;
              casesPercentDominant_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00020000;
              controlsPercentDominant_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00040000;
              casesPercentRecessive_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00080000;
              controlsPercentRecessive_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00100000;
              hardyWeinberg_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          genotypesCount_ = java.util.Collections.unmodifiableList(genotypesCount_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          genotypesFreq_ = java.util.Collections.unmodifiableList(genotypesFreq_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.class, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Builder.class);
    }

    public static com.google.protobuf.Parser<VariantStats> PARSER =
        new com.google.protobuf.AbstractParser<VariantStats>() {
      public VariantStats parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VariantStats(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VariantStats> getParserForType() {
      return PARSER;
    }

    public interface CountOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required string key = 1;
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      boolean hasKey();
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      java.lang.String getKey();
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // required int32 count = 2;
      /**
       * <code>required int32 count = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      boolean hasCount();
      /**
       * <code>required int32 count = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      int getCount();
    }
    /**
     * Protobuf type {@code org.opencb.biodata.models.variant.protobuf.VariantStats.Count}
     */
    public static final class Count extends
        com.google.protobuf.GeneratedMessage
        implements CountOrBuilder {
      // Use Count.newBuilder() to construct.
      private Count(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Count(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Count defaultInstance;
      public static Count getDefaultInstance() {
        return defaultInstance;
      }

      public Count getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Count(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                count_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.class, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder.class);
      }

      public static com.google.protobuf.Parser<Count> PARSER =
          new com.google.protobuf.AbstractParser<Count>() {
        public Count parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Count(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Count> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // required int32 count = 2;
      public static final int COUNT_FIELD_NUMBER = 2;
      private int count_;
      /**
       * <code>required int32 count = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 count = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      public int getCount() {
        return count_;
      }

      private void initFields() {
        key_ = "";
        count_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasKey()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasCount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, count_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, count_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.opencb.biodata.models.variant.protobuf.VariantStats.Count}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.class, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder.class);
        }

        // Construct using org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          count_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_descriptor;
        }

        public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count getDefaultInstanceForType() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.getDefaultInstance();
        }

        public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count build() {
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count buildPartial() {
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count result = new org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.count_ = count_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count) {
            return mergeFrom((org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count other) {
          if (other == org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            onChanged();
          }
          if (other.hasCount()) {
            setCount(other.getCount());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasKey()) {
            
            return false;
          }
          if (!hasCount()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }

        // required int32 count = 2;
        private int count_ ;
        /**
         * <code>required int32 count = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public boolean hasCount() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required int32 count = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public int getCount() {
          return count_;
        }
        /**
         * <code>required int32 count = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public Builder setCount(int value) {
          bitField0_ |= 0x00000002;
          count_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 count = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public Builder clearCount() {
          bitField0_ = (bitField0_ & ~0x00000002);
          count_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.opencb.biodata.models.variant.protobuf.VariantStats.Count)
      }

      static {
        defaultInstance = new Count(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.opencb.biodata.models.variant.protobuf.VariantStats.Count)
    }

    public interface FrequencyOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required string key = 1;
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      boolean hasKey();
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      java.lang.String getKey();
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      // required float frequency = 2;
      /**
       * <code>required float frequency = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      boolean hasFrequency();
      /**
       * <code>required float frequency = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      float getFrequency();
    }
    /**
     * Protobuf type {@code org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency}
     */
    public static final class Frequency extends
        com.google.protobuf.GeneratedMessage
        implements FrequencyOrBuilder {
      // Use Frequency.newBuilder() to construct.
      private Frequency(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Frequency(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Frequency defaultInstance;
      public static Frequency getDefaultInstance() {
        return defaultInstance;
      }

      public Frequency getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Frequency(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                key_ = input.readBytes();
                break;
              }
              case 21: {
                bitField0_ |= 0x00000002;
                frequency_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.class, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder.class);
      }

      public static com.google.protobuf.Parser<Frequency> PARSER =
          new com.google.protobuf.AbstractParser<Frequency>() {
        public Frequency parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Frequency(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Frequency> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.Object key_;
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            key_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string key = 1;</code>
       *
       * <pre>
       * Key of the pair 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // required float frequency = 2;
      public static final int FREQUENCY_FIELD_NUMBER = 2;
      private float frequency_;
      /**
       * <code>required float frequency = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      public boolean hasFrequency() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float frequency = 2;</code>
       *
       * <pre>
       * Value of the pair 
       * </pre>
       */
      public float getFrequency() {
        return frequency_;
      }

      private void initFields() {
        key_ = "";
        frequency_ = 0F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasKey()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasFrequency()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, frequency_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getKeyBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, frequency_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.class, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder.class);
        }

        // Construct using org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          key_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          frequency_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_descriptor;
        }

        public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency getDefaultInstanceForType() {
          return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.getDefaultInstance();
        }

        public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency build() {
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency buildPartial() {
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency result = new org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.key_ = key_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.frequency_ = frequency_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency) {
            return mergeFrom((org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency other) {
          if (other == org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.getDefaultInstance()) return this;
          if (other.hasKey()) {
            bitField0_ |= 0x00000001;
            key_ = other.key_;
            onChanged();
          }
          if (other.hasFrequency()) {
            setFrequency(other.getFrequency());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasKey()) {
            
            return false;
          }
          if (!hasFrequency()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required string key = 1;
        private java.lang.Object key_ = "";
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public boolean hasKey() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public java.lang.String getKey() {
          java.lang.Object ref = key_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            key_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public com.google.protobuf.ByteString
            getKeyBytes() {
          java.lang.Object ref = key_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            key_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public Builder setKey(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public Builder clearKey() {
          bitField0_ = (bitField0_ & ~0x00000001);
          key_ = getDefaultInstance().getKey();
          onChanged();
          return this;
        }
        /**
         * <code>required string key = 1;</code>
         *
         * <pre>
         * Key of the pair 
         * </pre>
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          key_ = value;
          onChanged();
          return this;
        }

        // required float frequency = 2;
        private float frequency_ ;
        /**
         * <code>required float frequency = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public boolean hasFrequency() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required float frequency = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public float getFrequency() {
          return frequency_;
        }
        /**
         * <code>required float frequency = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public Builder setFrequency(float value) {
          bitField0_ |= 0x00000002;
          frequency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required float frequency = 2;</code>
         *
         * <pre>
         * Value of the pair 
         * </pre>
         */
        public Builder clearFrequency() {
          bitField0_ = (bitField0_ & ~0x00000002);
          frequency_ = 0F;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency)
      }

      static {
        defaultInstance = new Frequency(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency)
    }

    private int bitField0_;
    // required int32 ref_allele_count = 1;
    public static final int REF_ALLELE_COUNT_FIELD_NUMBER = 1;
    private int refAlleleCount_;
    /**
     * <code>required int32 ref_allele_count = 1;</code>
     */
    public boolean hasRefAlleleCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 ref_allele_count = 1;</code>
     */
    public int getRefAlleleCount() {
      return refAlleleCount_;
    }

    // required int32 alt_allele_count = 2;
    public static final int ALT_ALLELE_COUNT_FIELD_NUMBER = 2;
    private int altAlleleCount_;
    /**
     * <code>required int32 alt_allele_count = 2;</code>
     */
    public boolean hasAltAlleleCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 alt_allele_count = 2;</code>
     */
    public int getAltAlleleCount() {
      return altAlleleCount_;
    }

    // repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;
    public static final int GENOTYPES_COUNT_FIELD_NUMBER = 3;
    private java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count> genotypesCount_;
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    public java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count> getGenotypesCountList() {
      return genotypesCount_;
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    public java.util.List<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder> 
        getGenotypesCountOrBuilderList() {
      return genotypesCount_;
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    public int getGenotypesCountCount() {
      return genotypesCount_.size();
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count getGenotypesCount(int index) {
      return genotypesCount_.get(index);
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
     */
    public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder getGenotypesCountOrBuilder(
        int index) {
      return genotypesCount_.get(index);
    }

    // required float ref_allele_freq = 4;
    public static final int REF_ALLELE_FREQ_FIELD_NUMBER = 4;
    private float refAlleleFreq_;
    /**
     * <code>required float ref_allele_freq = 4;</code>
     */
    public boolean hasRefAlleleFreq() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float ref_allele_freq = 4;</code>
     */
    public float getRefAlleleFreq() {
      return refAlleleFreq_;
    }

    // required float alt_allele_freq = 5;
    public static final int ALT_ALLELE_FREQ_FIELD_NUMBER = 5;
    private float altAlleleFreq_;
    /**
     * <code>required float alt_allele_freq = 5;</code>
     */
    public boolean hasAltAlleleFreq() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float alt_allele_freq = 5;</code>
     */
    public float getAltAlleleFreq() {
      return altAlleleFreq_;
    }

    // repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;
    public static final int GENOTYPES_FREQ_FIELD_NUMBER = 6;
    private java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency> genotypesFreq_;
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    public java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency> getGenotypesFreqList() {
      return genotypesFreq_;
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    public java.util.List<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder> 
        getGenotypesFreqOrBuilderList() {
      return genotypesFreq_;
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    public int getGenotypesFreqCount() {
      return genotypesFreq_.size();
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency getGenotypesFreq(int index) {
      return genotypesFreq_.get(index);
    }
    /**
     * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
     */
    public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder getGenotypesFreqOrBuilder(
        int index) {
      return genotypesFreq_.get(index);
    }

    // required int32 missing_alleles = 7;
    public static final int MISSING_ALLELES_FIELD_NUMBER = 7;
    private int missingAlleles_;
    /**
     * <code>required int32 missing_alleles = 7;</code>
     *
     * <pre>
     * Number of alleles whose information is missing 
     * </pre>
     */
    public boolean hasMissingAlleles() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 missing_alleles = 7;</code>
     *
     * <pre>
     * Number of alleles whose information is missing 
     * </pre>
     */
    public int getMissingAlleles() {
      return missingAlleles_;
    }

    // required int32 missing_genotypes = 8;
    public static final int MISSING_GENOTYPES_FIELD_NUMBER = 8;
    private int missingGenotypes_;
    /**
     * <code>required int32 missing_genotypes = 8;</code>
     *
     * <pre>
     * Number of genotypes with at least one allele missing 
     * </pre>
     */
    public boolean hasMissingGenotypes() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 missing_genotypes = 8;</code>
     *
     * <pre>
     * Number of genotypes with at least one allele missing 
     * </pre>
     */
    public int getMissingGenotypes() {
      return missingGenotypes_;
    }

    // required float maf = 9;
    public static final int MAF_FIELD_NUMBER = 9;
    private float maf_;
    /**
     * <code>required float maf = 9;</code>
     *
     * <pre>
     * Minor allele frequency 
     * </pre>
     */
    public boolean hasMaf() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float maf = 9;</code>
     *
     * <pre>
     * Minor allele frequency 
     * </pre>
     */
    public float getMaf() {
      return maf_;
    }

    // required float mgf = 10;
    public static final int MGF_FIELD_NUMBER = 10;
    private float mgf_;
    /**
     * <code>required float mgf = 10;</code>
     *
     * <pre>
     * Minor genotype frequency 
     * </pre>
     */
    public boolean hasMgf() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float mgf = 10;</code>
     *
     * <pre>
     * Minor genotype frequency 
     * </pre>
     */
    public float getMgf() {
      return mgf_;
    }

    // required string mafAllele = 11;
    public static final int MAFALLELE_FIELD_NUMBER = 11;
    private java.lang.Object mafAllele_;
    /**
     * <code>required string mafAllele = 11;</code>
     *
     * <pre>
     * Allele with minor allele frequency 
     * </pre>
     */
    public boolean hasMafAllele() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required string mafAllele = 11;</code>
     *
     * <pre>
     * Allele with minor allele frequency 
     * </pre>
     */
    public java.lang.String getMafAllele() {
      java.lang.Object ref = mafAllele_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mafAllele_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string mafAllele = 11;</code>
     *
     * <pre>
     * Allele with minor allele frequency 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getMafAlleleBytes() {
      java.lang.Object ref = mafAllele_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mafAllele_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string mgfGenotype = 12;
    public static final int MGFGENOTYPE_FIELD_NUMBER = 12;
    private java.lang.Object mgfGenotype_;
    /**
     * <code>required string mgfGenotype = 12;</code>
     *
     * <pre>
     * Genotype with minor genotype frequency 
     * </pre>
     */
    public boolean hasMgfGenotype() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required string mgfGenotype = 12;</code>
     *
     * <pre>
     * Genotype with minor genotype frequency 
     * </pre>
     */
    public java.lang.String getMgfGenotype() {
      java.lang.Object ref = mgfGenotype_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mgfGenotype_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string mgfGenotype = 12;</code>
     *
     * <pre>
     * Genotype with minor genotype frequency 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getMgfGenotypeBytes() {
      java.lang.Object ref = mgfGenotype_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mgfGenotype_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required bool passed_filters = 13;
    public static final int PASSED_FILTERS_FIELD_NUMBER = 13;
    private boolean passedFilters_;
    /**
     * <code>required bool passed_filters = 13;</code>
     */
    public boolean hasPassedFilters() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required bool passed_filters = 13;</code>
     */
    public boolean getPassedFilters() {
      return passedFilters_;
    }

    // required float quality = 14;
    public static final int QUALITY_FIELD_NUMBER = 14;
    private float quality_;
    /**
     * <code>required float quality = 14;</code>
     */
    public boolean hasQuality() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float quality = 14;</code>
     */
    public float getQuality() {
      return quality_;
    }

    // required int32 num_samples = 15;
    public static final int NUM_SAMPLES_FIELD_NUMBER = 15;
    private int numSamples_;
    /**
     * <code>required int32 num_samples = 15;</code>
     */
    public boolean hasNumSamples() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 num_samples = 15;</code>
     */
    public int getNumSamples() {
      return numSamples_;
    }

    // required int32 transitions_count = 16;
    public static final int TRANSITIONS_COUNT_FIELD_NUMBER = 16;
    private int transitionsCount_;
    /**
     * <code>required int32 transitions_count = 16;</code>
     */
    public boolean hasTransitionsCount() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 transitions_count = 16;</code>
     */
    public int getTransitionsCount() {
      return transitionsCount_;
    }

    // required int32 transversions_count = 17;
    public static final int TRANSVERSIONS_COUNT_FIELD_NUMBER = 17;
    private int transversionsCount_;
    /**
     * <code>required int32 transversions_count = 17;</code>
     */
    public boolean hasTransversionsCount() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required int32 transversions_count = 17;</code>
     */
    public int getTransversionsCount() {
      return transversionsCount_;
    }

    // optional int32 mendelian_errors = 18;
    public static final int MENDELIAN_ERRORS_FIELD_NUMBER = 18;
    private int mendelianErrors_;
    /**
     * <code>optional int32 mendelian_errors = 18;</code>
     *
     * <pre>
     * Number of mendelian errors found 
     * </pre>
     */
    public boolean hasMendelianErrors() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 mendelian_errors = 18;</code>
     *
     * <pre>
     * Number of mendelian errors found 
     * </pre>
     */
    public int getMendelianErrors() {
      return mendelianErrors_;
    }

    // optional float cases_percent_dominant = 19;
    public static final int CASES_PERCENT_DOMINANT_FIELD_NUMBER = 19;
    private float casesPercentDominant_;
    /**
     * <code>optional float cases_percent_dominant = 19;</code>
     *
     * <pre>
     * Percentage of cases that follow a dominant inheritance pattern 
     * </pre>
     */
    public boolean hasCasesPercentDominant() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float cases_percent_dominant = 19;</code>
     *
     * <pre>
     * Percentage of cases that follow a dominant inheritance pattern 
     * </pre>
     */
    public float getCasesPercentDominant() {
      return casesPercentDominant_;
    }

    // optional float controls_percent_dominant = 20;
    public static final int CONTROLS_PERCENT_DOMINANT_FIELD_NUMBER = 20;
    private float controlsPercentDominant_;
    /**
     * <code>optional float controls_percent_dominant = 20;</code>
     *
     * <pre>
     * Percentage of controls that follow a dominant inheritance pattern 
     * </pre>
     */
    public boolean hasControlsPercentDominant() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float controls_percent_dominant = 20;</code>
     *
     * <pre>
     * Percentage of controls that follow a dominant inheritance pattern 
     * </pre>
     */
    public float getControlsPercentDominant() {
      return controlsPercentDominant_;
    }

    // optional float cases_percent_recessive = 21;
    public static final int CASES_PERCENT_RECESSIVE_FIELD_NUMBER = 21;
    private float casesPercentRecessive_;
    /**
     * <code>optional float cases_percent_recessive = 21;</code>
     *
     * <pre>
     * Percentage of cases that follow a recessive inheritance pattern 
     * </pre>
     */
    public boolean hasCasesPercentRecessive() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float cases_percent_recessive = 21;</code>
     *
     * <pre>
     * Percentage of cases that follow a recessive inheritance pattern 
     * </pre>
     */
    public float getCasesPercentRecessive() {
      return casesPercentRecessive_;
    }

    // optional float controls_percent_recessive = 22;
    public static final int CONTROLS_PERCENT_RECESSIVE_FIELD_NUMBER = 22;
    private float controlsPercentRecessive_;
    /**
     * <code>optional float controls_percent_recessive = 22;</code>
     *
     * <pre>
     * Percentage of controls that follow a recessive inheritance pattern 
     * </pre>
     */
    public boolean hasControlsPercentRecessive() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float controls_percent_recessive = 22;</code>
     *
     * <pre>
     * Percentage of controls that follow a recessive inheritance pattern 
     * </pre>
     */
    public float getControlsPercentRecessive() {
      return controlsPercentRecessive_;
    }

    // optional float hardy_weinberg = 23;
    public static final int HARDY_WEINBERG_FIELD_NUMBER = 23;
    private float hardyWeinberg_;
    /**
     * <code>optional float hardy_weinberg = 23;</code>
     *
     * <pre>
     * All samples Hardy-Weinberg stats
     * </pre>
     */
    public boolean hasHardyWeinberg() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float hardy_weinberg = 23;</code>
     *
     * <pre>
     * All samples Hardy-Weinberg stats
     * </pre>
     */
    public float getHardyWeinberg() {
      return hardyWeinberg_;
    }

    private void initFields() {
      refAlleleCount_ = 0;
      altAlleleCount_ = 0;
      genotypesCount_ = java.util.Collections.emptyList();
      refAlleleFreq_ = 0F;
      altAlleleFreq_ = 0F;
      genotypesFreq_ = java.util.Collections.emptyList();
      missingAlleles_ = 0;
      missingGenotypes_ = 0;
      maf_ = 0F;
      mgf_ = 0F;
      mafAllele_ = "";
      mgfGenotype_ = "";
      passedFilters_ = false;
      quality_ = 0F;
      numSamples_ = 0;
      transitionsCount_ = 0;
      transversionsCount_ = 0;
      mendelianErrors_ = 0;
      casesPercentDominant_ = 0F;
      controlsPercentDominant_ = 0F;
      casesPercentRecessive_ = 0F;
      controlsPercentRecessive_ = 0F;
      hardyWeinberg_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRefAlleleCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAltAlleleCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRefAlleleFreq()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAltAlleleFreq()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMissingAlleles()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMissingGenotypes()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaf()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMgf()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMafAllele()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMgfGenotype()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPassedFilters()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQuality()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumSamples()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTransitionsCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTransversionsCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getGenotypesCountCount(); i++) {
        if (!getGenotypesCount(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getGenotypesFreqCount(); i++) {
        if (!getGenotypesFreq(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, refAlleleCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, altAlleleCount_);
      }
      for (int i = 0; i < genotypesCount_.size(); i++) {
        output.writeMessage(3, genotypesCount_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(4, refAlleleFreq_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(5, altAlleleFreq_);
      }
      for (int i = 0; i < genotypesFreq_.size(); i++) {
        output.writeMessage(6, genotypesFreq_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, missingAlleles_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, missingGenotypes_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(9, maf_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(10, mgf_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(11, getMafAlleleBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(12, getMgfGenotypeBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(13, passedFilters_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(14, quality_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(15, numSamples_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(16, transitionsCount_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(17, transversionsCount_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(18, mendelianErrors_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(19, casesPercentDominant_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(20, controlsPercentDominant_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(21, casesPercentRecessive_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(22, controlsPercentRecessive_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(23, hardyWeinberg_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, refAlleleCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, altAlleleCount_);
      }
      for (int i = 0; i < genotypesCount_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, genotypesCount_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, refAlleleFreq_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, altAlleleFreq_);
      }
      for (int i = 0; i < genotypesFreq_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, genotypesFreq_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, missingAlleles_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, missingGenotypes_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, maf_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, mgf_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getMafAlleleBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getMgfGenotypeBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, passedFilters_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, quality_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, numSamples_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, transitionsCount_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, transversionsCount_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, mendelianErrors_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, casesPercentDominant_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, controlsPercentDominant_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, casesPercentRecessive_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, controlsPercentRecessive_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, hardyWeinberg_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.opencb.biodata.models.variant.protobuf.VariantStats}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStatsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.class, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Builder.class);
      }

      // Construct using org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGenotypesCountFieldBuilder();
          getGenotypesFreqFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        refAlleleCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        altAlleleCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (genotypesCountBuilder_ == null) {
          genotypesCount_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          genotypesCountBuilder_.clear();
        }
        refAlleleFreq_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        altAlleleFreq_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (genotypesFreqBuilder_ == null) {
          genotypesFreq_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          genotypesFreqBuilder_.clear();
        }
        missingAlleles_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        missingGenotypes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        maf_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        mgf_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        mafAllele_ = "";
        bitField0_ = (bitField0_ & ~0x00000400);
        mgfGenotype_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        passedFilters_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        quality_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        numSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        transitionsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        transversionsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        mendelianErrors_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        casesPercentDominant_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        controlsPercentDominant_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        casesPercentRecessive_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        controlsPercentRecessive_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        hardyWeinberg_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor;
      }

      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats getDefaultInstanceForType() {
        return org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.getDefaultInstance();
      }

      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats build() {
        org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats buildPartial() {
        org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats result = new org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.refAlleleCount_ = refAlleleCount_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.altAlleleCount_ = altAlleleCount_;
        if (genotypesCountBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            genotypesCount_ = java.util.Collections.unmodifiableList(genotypesCount_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.genotypesCount_ = genotypesCount_;
        } else {
          result.genotypesCount_ = genotypesCountBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.refAlleleFreq_ = refAlleleFreq_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.altAlleleFreq_ = altAlleleFreq_;
        if (genotypesFreqBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            genotypesFreq_ = java.util.Collections.unmodifiableList(genotypesFreq_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.genotypesFreq_ = genotypesFreq_;
        } else {
          result.genotypesFreq_ = genotypesFreqBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.missingAlleles_ = missingAlleles_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.missingGenotypes_ = missingGenotypes_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maf_ = maf_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.mgf_ = mgf_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mafAllele_ = mafAllele_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000200;
        }
        result.mgfGenotype_ = mgfGenotype_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.passedFilters_ = passedFilters_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.quality_ = quality_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.numSamples_ = numSamples_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.transitionsCount_ = transitionsCount_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.transversionsCount_ = transversionsCount_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.mendelianErrors_ = mendelianErrors_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.casesPercentDominant_ = casesPercentDominant_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.controlsPercentDominant_ = controlsPercentDominant_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.casesPercentRecessive_ = casesPercentRecessive_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.controlsPercentRecessive_ = controlsPercentRecessive_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.hardyWeinberg_ = hardyWeinberg_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats) {
          return mergeFrom((org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats other) {
        if (other == org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.getDefaultInstance()) return this;
        if (other.hasRefAlleleCount()) {
          setRefAlleleCount(other.getRefAlleleCount());
        }
        if (other.hasAltAlleleCount()) {
          setAltAlleleCount(other.getAltAlleleCount());
        }
        if (genotypesCountBuilder_ == null) {
          if (!other.genotypesCount_.isEmpty()) {
            if (genotypesCount_.isEmpty()) {
              genotypesCount_ = other.genotypesCount_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureGenotypesCountIsMutable();
              genotypesCount_.addAll(other.genotypesCount_);
            }
            onChanged();
          }
        } else {
          if (!other.genotypesCount_.isEmpty()) {
            if (genotypesCountBuilder_.isEmpty()) {
              genotypesCountBuilder_.dispose();
              genotypesCountBuilder_ = null;
              genotypesCount_ = other.genotypesCount_;
              bitField0_ = (bitField0_ & ~0x00000004);
              genotypesCountBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGenotypesCountFieldBuilder() : null;
            } else {
              genotypesCountBuilder_.addAllMessages(other.genotypesCount_);
            }
          }
        }
        if (other.hasRefAlleleFreq()) {
          setRefAlleleFreq(other.getRefAlleleFreq());
        }
        if (other.hasAltAlleleFreq()) {
          setAltAlleleFreq(other.getAltAlleleFreq());
        }
        if (genotypesFreqBuilder_ == null) {
          if (!other.genotypesFreq_.isEmpty()) {
            if (genotypesFreq_.isEmpty()) {
              genotypesFreq_ = other.genotypesFreq_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureGenotypesFreqIsMutable();
              genotypesFreq_.addAll(other.genotypesFreq_);
            }
            onChanged();
          }
        } else {
          if (!other.genotypesFreq_.isEmpty()) {
            if (genotypesFreqBuilder_.isEmpty()) {
              genotypesFreqBuilder_.dispose();
              genotypesFreqBuilder_ = null;
              genotypesFreq_ = other.genotypesFreq_;
              bitField0_ = (bitField0_ & ~0x00000020);
              genotypesFreqBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGenotypesFreqFieldBuilder() : null;
            } else {
              genotypesFreqBuilder_.addAllMessages(other.genotypesFreq_);
            }
          }
        }
        if (other.hasMissingAlleles()) {
          setMissingAlleles(other.getMissingAlleles());
        }
        if (other.hasMissingGenotypes()) {
          setMissingGenotypes(other.getMissingGenotypes());
        }
        if (other.hasMaf()) {
          setMaf(other.getMaf());
        }
        if (other.hasMgf()) {
          setMgf(other.getMgf());
        }
        if (other.hasMafAllele()) {
          bitField0_ |= 0x00000400;
          mafAllele_ = other.mafAllele_;
          onChanged();
        }
        if (other.hasMgfGenotype()) {
          bitField0_ |= 0x00000800;
          mgfGenotype_ = other.mgfGenotype_;
          onChanged();
        }
        if (other.hasPassedFilters()) {
          setPassedFilters(other.getPassedFilters());
        }
        if (other.hasQuality()) {
          setQuality(other.getQuality());
        }
        if (other.hasNumSamples()) {
          setNumSamples(other.getNumSamples());
        }
        if (other.hasTransitionsCount()) {
          setTransitionsCount(other.getTransitionsCount());
        }
        if (other.hasTransversionsCount()) {
          setTransversionsCount(other.getTransversionsCount());
        }
        if (other.hasMendelianErrors()) {
          setMendelianErrors(other.getMendelianErrors());
        }
        if (other.hasCasesPercentDominant()) {
          setCasesPercentDominant(other.getCasesPercentDominant());
        }
        if (other.hasControlsPercentDominant()) {
          setControlsPercentDominant(other.getControlsPercentDominant());
        }
        if (other.hasCasesPercentRecessive()) {
          setCasesPercentRecessive(other.getCasesPercentRecessive());
        }
        if (other.hasControlsPercentRecessive()) {
          setControlsPercentRecessive(other.getControlsPercentRecessive());
        }
        if (other.hasHardyWeinberg()) {
          setHardyWeinberg(other.getHardyWeinberg());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRefAlleleCount()) {
          
          return false;
        }
        if (!hasAltAlleleCount()) {
          
          return false;
        }
        if (!hasRefAlleleFreq()) {
          
          return false;
        }
        if (!hasAltAlleleFreq()) {
          
          return false;
        }
        if (!hasMissingAlleles()) {
          
          return false;
        }
        if (!hasMissingGenotypes()) {
          
          return false;
        }
        if (!hasMaf()) {
          
          return false;
        }
        if (!hasMgf()) {
          
          return false;
        }
        if (!hasMafAllele()) {
          
          return false;
        }
        if (!hasMgfGenotype()) {
          
          return false;
        }
        if (!hasPassedFilters()) {
          
          return false;
        }
        if (!hasQuality()) {
          
          return false;
        }
        if (!hasNumSamples()) {
          
          return false;
        }
        if (!hasTransitionsCount()) {
          
          return false;
        }
        if (!hasTransversionsCount()) {
          
          return false;
        }
        for (int i = 0; i < getGenotypesCountCount(); i++) {
          if (!getGenotypesCount(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getGenotypesFreqCount(); i++) {
          if (!getGenotypesFreq(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 ref_allele_count = 1;
      private int refAlleleCount_ ;
      /**
       * <code>required int32 ref_allele_count = 1;</code>
       */
      public boolean hasRefAlleleCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 ref_allele_count = 1;</code>
       */
      public int getRefAlleleCount() {
        return refAlleleCount_;
      }
      /**
       * <code>required int32 ref_allele_count = 1;</code>
       */
      public Builder setRefAlleleCount(int value) {
        bitField0_ |= 0x00000001;
        refAlleleCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ref_allele_count = 1;</code>
       */
      public Builder clearRefAlleleCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        refAlleleCount_ = 0;
        onChanged();
        return this;
      }

      // required int32 alt_allele_count = 2;
      private int altAlleleCount_ ;
      /**
       * <code>required int32 alt_allele_count = 2;</code>
       */
      public boolean hasAltAlleleCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 alt_allele_count = 2;</code>
       */
      public int getAltAlleleCount() {
        return altAlleleCount_;
      }
      /**
       * <code>required int32 alt_allele_count = 2;</code>
       */
      public Builder setAltAlleleCount(int value) {
        bitField0_ |= 0x00000002;
        altAlleleCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 alt_allele_count = 2;</code>
       */
      public Builder clearAltAlleleCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        altAlleleCount_ = 0;
        onChanged();
        return this;
      }

      // repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;
      private java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count> genotypesCount_ =
        java.util.Collections.emptyList();
      private void ensureGenotypesCountIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          genotypesCount_ = new java.util.ArrayList<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count>(genotypesCount_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder> genotypesCountBuilder_;

      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count> getGenotypesCountList() {
        if (genotypesCountBuilder_ == null) {
          return java.util.Collections.unmodifiableList(genotypesCount_);
        } else {
          return genotypesCountBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public int getGenotypesCountCount() {
        if (genotypesCountBuilder_ == null) {
          return genotypesCount_.size();
        } else {
          return genotypesCountBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count getGenotypesCount(int index) {
        if (genotypesCountBuilder_ == null) {
          return genotypesCount_.get(index);
        } else {
          return genotypesCountBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder setGenotypesCount(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count value) {
        if (genotypesCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenotypesCountIsMutable();
          genotypesCount_.set(index, value);
          onChanged();
        } else {
          genotypesCountBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder setGenotypesCount(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder builderForValue) {
        if (genotypesCountBuilder_ == null) {
          ensureGenotypesCountIsMutable();
          genotypesCount_.set(index, builderForValue.build());
          onChanged();
        } else {
          genotypesCountBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder addGenotypesCount(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count value) {
        if (genotypesCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenotypesCountIsMutable();
          genotypesCount_.add(value);
          onChanged();
        } else {
          genotypesCountBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder addGenotypesCount(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count value) {
        if (genotypesCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenotypesCountIsMutable();
          genotypesCount_.add(index, value);
          onChanged();
        } else {
          genotypesCountBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder addGenotypesCount(
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder builderForValue) {
        if (genotypesCountBuilder_ == null) {
          ensureGenotypesCountIsMutable();
          genotypesCount_.add(builderForValue.build());
          onChanged();
        } else {
          genotypesCountBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder addGenotypesCount(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder builderForValue) {
        if (genotypesCountBuilder_ == null) {
          ensureGenotypesCountIsMutable();
          genotypesCount_.add(index, builderForValue.build());
          onChanged();
        } else {
          genotypesCountBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder addAllGenotypesCount(
          java.lang.Iterable<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count> values) {
        if (genotypesCountBuilder_ == null) {
          ensureGenotypesCountIsMutable();
          super.addAll(values, genotypesCount_);
          onChanged();
        } else {
          genotypesCountBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder clearGenotypesCount() {
        if (genotypesCountBuilder_ == null) {
          genotypesCount_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          genotypesCountBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public Builder removeGenotypesCount(int index) {
        if (genotypesCountBuilder_ == null) {
          ensureGenotypesCountIsMutable();
          genotypesCount_.remove(index);
          onChanged();
        } else {
          genotypesCountBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder getGenotypesCountBuilder(
          int index) {
        return getGenotypesCountFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder getGenotypesCountOrBuilder(
          int index) {
        if (genotypesCountBuilder_ == null) {
          return genotypesCount_.get(index);  } else {
          return genotypesCountBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public java.util.List<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder> 
           getGenotypesCountOrBuilderList() {
        if (genotypesCountBuilder_ != null) {
          return genotypesCountBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(genotypesCount_);
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder addGenotypesCountBuilder() {
        return getGenotypesCountFieldBuilder().addBuilder(
            org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.getDefaultInstance());
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder addGenotypesCountBuilder(
          int index) {
        return getGenotypesCountFieldBuilder().addBuilder(
            index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.getDefaultInstance());
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Count genotypes_count = 3;</code>
       */
      public java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder> 
           getGenotypesCountBuilderList() {
        return getGenotypesCountFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder> 
          getGenotypesCountFieldBuilder() {
        if (genotypesCountBuilder_ == null) {
          genotypesCountBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Count.Builder, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.CountOrBuilder>(
                  genotypesCount_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          genotypesCount_ = null;
        }
        return genotypesCountBuilder_;
      }

      // required float ref_allele_freq = 4;
      private float refAlleleFreq_ ;
      /**
       * <code>required float ref_allele_freq = 4;</code>
       */
      public boolean hasRefAlleleFreq() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float ref_allele_freq = 4;</code>
       */
      public float getRefAlleleFreq() {
        return refAlleleFreq_;
      }
      /**
       * <code>required float ref_allele_freq = 4;</code>
       */
      public Builder setRefAlleleFreq(float value) {
        bitField0_ |= 0x00000008;
        refAlleleFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ref_allele_freq = 4;</code>
       */
      public Builder clearRefAlleleFreq() {
        bitField0_ = (bitField0_ & ~0x00000008);
        refAlleleFreq_ = 0F;
        onChanged();
        return this;
      }

      // required float alt_allele_freq = 5;
      private float altAlleleFreq_ ;
      /**
       * <code>required float alt_allele_freq = 5;</code>
       */
      public boolean hasAltAlleleFreq() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float alt_allele_freq = 5;</code>
       */
      public float getAltAlleleFreq() {
        return altAlleleFreq_;
      }
      /**
       * <code>required float alt_allele_freq = 5;</code>
       */
      public Builder setAltAlleleFreq(float value) {
        bitField0_ |= 0x00000010;
        altAlleleFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float alt_allele_freq = 5;</code>
       */
      public Builder clearAltAlleleFreq() {
        bitField0_ = (bitField0_ & ~0x00000010);
        altAlleleFreq_ = 0F;
        onChanged();
        return this;
      }

      // repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;
      private java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency> genotypesFreq_ =
        java.util.Collections.emptyList();
      private void ensureGenotypesFreqIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          genotypesFreq_ = new java.util.ArrayList<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency>(genotypesFreq_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder> genotypesFreqBuilder_;

      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency> getGenotypesFreqList() {
        if (genotypesFreqBuilder_ == null) {
          return java.util.Collections.unmodifiableList(genotypesFreq_);
        } else {
          return genotypesFreqBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public int getGenotypesFreqCount() {
        if (genotypesFreqBuilder_ == null) {
          return genotypesFreq_.size();
        } else {
          return genotypesFreqBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency getGenotypesFreq(int index) {
        if (genotypesFreqBuilder_ == null) {
          return genotypesFreq_.get(index);
        } else {
          return genotypesFreqBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder setGenotypesFreq(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency value) {
        if (genotypesFreqBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.set(index, value);
          onChanged();
        } else {
          genotypesFreqBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder setGenotypesFreq(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder builderForValue) {
        if (genotypesFreqBuilder_ == null) {
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.set(index, builderForValue.build());
          onChanged();
        } else {
          genotypesFreqBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder addGenotypesFreq(org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency value) {
        if (genotypesFreqBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.add(value);
          onChanged();
        } else {
          genotypesFreqBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder addGenotypesFreq(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency value) {
        if (genotypesFreqBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.add(index, value);
          onChanged();
        } else {
          genotypesFreqBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder addGenotypesFreq(
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder builderForValue) {
        if (genotypesFreqBuilder_ == null) {
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.add(builderForValue.build());
          onChanged();
        } else {
          genotypesFreqBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder addGenotypesFreq(
          int index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder builderForValue) {
        if (genotypesFreqBuilder_ == null) {
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.add(index, builderForValue.build());
          onChanged();
        } else {
          genotypesFreqBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder addAllGenotypesFreq(
          java.lang.Iterable<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency> values) {
        if (genotypesFreqBuilder_ == null) {
          ensureGenotypesFreqIsMutable();
          super.addAll(values, genotypesFreq_);
          onChanged();
        } else {
          genotypesFreqBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder clearGenotypesFreq() {
        if (genotypesFreqBuilder_ == null) {
          genotypesFreq_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          genotypesFreqBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public Builder removeGenotypesFreq(int index) {
        if (genotypesFreqBuilder_ == null) {
          ensureGenotypesFreqIsMutable();
          genotypesFreq_.remove(index);
          onChanged();
        } else {
          genotypesFreqBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder getGenotypesFreqBuilder(
          int index) {
        return getGenotypesFreqFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder getGenotypesFreqOrBuilder(
          int index) {
        if (genotypesFreqBuilder_ == null) {
          return genotypesFreq_.get(index);  } else {
          return genotypesFreqBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public java.util.List<? extends org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder> 
           getGenotypesFreqOrBuilderList() {
        if (genotypesFreqBuilder_ != null) {
          return genotypesFreqBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(genotypesFreq_);
        }
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder addGenotypesFreqBuilder() {
        return getGenotypesFreqFieldBuilder().addBuilder(
            org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.getDefaultInstance());
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder addGenotypesFreqBuilder(
          int index) {
        return getGenotypesFreqFieldBuilder().addBuilder(
            index, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.getDefaultInstance());
      }
      /**
       * <code>repeated .org.opencb.biodata.models.variant.protobuf.VariantStats.Frequency genotypes_freq = 6;</code>
       */
      public java.util.List<org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder> 
           getGenotypesFreqBuilderList() {
        return getGenotypesFreqFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder> 
          getGenotypesFreqFieldBuilder() {
        if (genotypesFreqBuilder_ == null) {
          genotypesFreqBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.Frequency.Builder, org.opencb.biodata.models.variant.protobuf.VariantStatsProtos.VariantStats.FrequencyOrBuilder>(
                  genotypesFreq_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          genotypesFreq_ = null;
        }
        return genotypesFreqBuilder_;
      }

      // required int32 missing_alleles = 7;
      private int missingAlleles_ ;
      /**
       * <code>required int32 missing_alleles = 7;</code>
       *
       * <pre>
       * Number of alleles whose information is missing 
       * </pre>
       */
      public boolean hasMissingAlleles() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 missing_alleles = 7;</code>
       *
       * <pre>
       * Number of alleles whose information is missing 
       * </pre>
       */
      public int getMissingAlleles() {
        return missingAlleles_;
      }
      /**
       * <code>required int32 missing_alleles = 7;</code>
       *
       * <pre>
       * Number of alleles whose information is missing 
       * </pre>
       */
      public Builder setMissingAlleles(int value) {
        bitField0_ |= 0x00000040;
        missingAlleles_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 missing_alleles = 7;</code>
       *
       * <pre>
       * Number of alleles whose information is missing 
       * </pre>
       */
      public Builder clearMissingAlleles() {
        bitField0_ = (bitField0_ & ~0x00000040);
        missingAlleles_ = 0;
        onChanged();
        return this;
      }

      // required int32 missing_genotypes = 8;
      private int missingGenotypes_ ;
      /**
       * <code>required int32 missing_genotypes = 8;</code>
       *
       * <pre>
       * Number of genotypes with at least one allele missing 
       * </pre>
       */
      public boolean hasMissingGenotypes() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 missing_genotypes = 8;</code>
       *
       * <pre>
       * Number of genotypes with at least one allele missing 
       * </pre>
       */
      public int getMissingGenotypes() {
        return missingGenotypes_;
      }
      /**
       * <code>required int32 missing_genotypes = 8;</code>
       *
       * <pre>
       * Number of genotypes with at least one allele missing 
       * </pre>
       */
      public Builder setMissingGenotypes(int value) {
        bitField0_ |= 0x00000080;
        missingGenotypes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 missing_genotypes = 8;</code>
       *
       * <pre>
       * Number of genotypes with at least one allele missing 
       * </pre>
       */
      public Builder clearMissingGenotypes() {
        bitField0_ = (bitField0_ & ~0x00000080);
        missingGenotypes_ = 0;
        onChanged();
        return this;
      }

      // required float maf = 9;
      private float maf_ ;
      /**
       * <code>required float maf = 9;</code>
       *
       * <pre>
       * Minor allele frequency 
       * </pre>
       */
      public boolean hasMaf() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float maf = 9;</code>
       *
       * <pre>
       * Minor allele frequency 
       * </pre>
       */
      public float getMaf() {
        return maf_;
      }
      /**
       * <code>required float maf = 9;</code>
       *
       * <pre>
       * Minor allele frequency 
       * </pre>
       */
      public Builder setMaf(float value) {
        bitField0_ |= 0x00000100;
        maf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float maf = 9;</code>
       *
       * <pre>
       * Minor allele frequency 
       * </pre>
       */
      public Builder clearMaf() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maf_ = 0F;
        onChanged();
        return this;
      }

      // required float mgf = 10;
      private float mgf_ ;
      /**
       * <code>required float mgf = 10;</code>
       *
       * <pre>
       * Minor genotype frequency 
       * </pre>
       */
      public boolean hasMgf() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required float mgf = 10;</code>
       *
       * <pre>
       * Minor genotype frequency 
       * </pre>
       */
      public float getMgf() {
        return mgf_;
      }
      /**
       * <code>required float mgf = 10;</code>
       *
       * <pre>
       * Minor genotype frequency 
       * </pre>
       */
      public Builder setMgf(float value) {
        bitField0_ |= 0x00000200;
        mgf_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float mgf = 10;</code>
       *
       * <pre>
       * Minor genotype frequency 
       * </pre>
       */
      public Builder clearMgf() {
        bitField0_ = (bitField0_ & ~0x00000200);
        mgf_ = 0F;
        onChanged();
        return this;
      }

      // required string mafAllele = 11;
      private java.lang.Object mafAllele_ = "";
      /**
       * <code>required string mafAllele = 11;</code>
       *
       * <pre>
       * Allele with minor allele frequency 
       * </pre>
       */
      public boolean hasMafAllele() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required string mafAllele = 11;</code>
       *
       * <pre>
       * Allele with minor allele frequency 
       * </pre>
       */
      public java.lang.String getMafAllele() {
        java.lang.Object ref = mafAllele_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          mafAllele_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string mafAllele = 11;</code>
       *
       * <pre>
       * Allele with minor allele frequency 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getMafAlleleBytes() {
        java.lang.Object ref = mafAllele_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mafAllele_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string mafAllele = 11;</code>
       *
       * <pre>
       * Allele with minor allele frequency 
       * </pre>
       */
      public Builder setMafAllele(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        mafAllele_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string mafAllele = 11;</code>
       *
       * <pre>
       * Allele with minor allele frequency 
       * </pre>
       */
      public Builder clearMafAllele() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mafAllele_ = getDefaultInstance().getMafAllele();
        onChanged();
        return this;
      }
      /**
       * <code>required string mafAllele = 11;</code>
       *
       * <pre>
       * Allele with minor allele frequency 
       * </pre>
       */
      public Builder setMafAlleleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        mafAllele_ = value;
        onChanged();
        return this;
      }

      // required string mgfGenotype = 12;
      private java.lang.Object mgfGenotype_ = "";
      /**
       * <code>required string mgfGenotype = 12;</code>
       *
       * <pre>
       * Genotype with minor genotype frequency 
       * </pre>
       */
      public boolean hasMgfGenotype() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required string mgfGenotype = 12;</code>
       *
       * <pre>
       * Genotype with minor genotype frequency 
       * </pre>
       */
      public java.lang.String getMgfGenotype() {
        java.lang.Object ref = mgfGenotype_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          mgfGenotype_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string mgfGenotype = 12;</code>
       *
       * <pre>
       * Genotype with minor genotype frequency 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getMgfGenotypeBytes() {
        java.lang.Object ref = mgfGenotype_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mgfGenotype_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string mgfGenotype = 12;</code>
       *
       * <pre>
       * Genotype with minor genotype frequency 
       * </pre>
       */
      public Builder setMgfGenotype(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        mgfGenotype_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string mgfGenotype = 12;</code>
       *
       * <pre>
       * Genotype with minor genotype frequency 
       * </pre>
       */
      public Builder clearMgfGenotype() {
        bitField0_ = (bitField0_ & ~0x00000800);
        mgfGenotype_ = getDefaultInstance().getMgfGenotype();
        onChanged();
        return this;
      }
      /**
       * <code>required string mgfGenotype = 12;</code>
       *
       * <pre>
       * Genotype with minor genotype frequency 
       * </pre>
       */
      public Builder setMgfGenotypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        mgfGenotype_ = value;
        onChanged();
        return this;
      }

      // required bool passed_filters = 13;
      private boolean passedFilters_ ;
      /**
       * <code>required bool passed_filters = 13;</code>
       */
      public boolean hasPassedFilters() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required bool passed_filters = 13;</code>
       */
      public boolean getPassedFilters() {
        return passedFilters_;
      }
      /**
       * <code>required bool passed_filters = 13;</code>
       */
      public Builder setPassedFilters(boolean value) {
        bitField0_ |= 0x00001000;
        passedFilters_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool passed_filters = 13;</code>
       */
      public Builder clearPassedFilters() {
        bitField0_ = (bitField0_ & ~0x00001000);
        passedFilters_ = false;
        onChanged();
        return this;
      }

      // required float quality = 14;
      private float quality_ ;
      /**
       * <code>required float quality = 14;</code>
       */
      public boolean hasQuality() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required float quality = 14;</code>
       */
      public float getQuality() {
        return quality_;
      }
      /**
       * <code>required float quality = 14;</code>
       */
      public Builder setQuality(float value) {
        bitField0_ |= 0x00002000;
        quality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float quality = 14;</code>
       */
      public Builder clearQuality() {
        bitField0_ = (bitField0_ & ~0x00002000);
        quality_ = 0F;
        onChanged();
        return this;
      }

      // required int32 num_samples = 15;
      private int numSamples_ ;
      /**
       * <code>required int32 num_samples = 15;</code>
       */
      public boolean hasNumSamples() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required int32 num_samples = 15;</code>
       */
      public int getNumSamples() {
        return numSamples_;
      }
      /**
       * <code>required int32 num_samples = 15;</code>
       */
      public Builder setNumSamples(int value) {
        bitField0_ |= 0x00004000;
        numSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 num_samples = 15;</code>
       */
      public Builder clearNumSamples() {
        bitField0_ = (bitField0_ & ~0x00004000);
        numSamples_ = 0;
        onChanged();
        return this;
      }

      // required int32 transitions_count = 16;
      private int transitionsCount_ ;
      /**
       * <code>required int32 transitions_count = 16;</code>
       */
      public boolean hasTransitionsCount() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required int32 transitions_count = 16;</code>
       */
      public int getTransitionsCount() {
        return transitionsCount_;
      }
      /**
       * <code>required int32 transitions_count = 16;</code>
       */
      public Builder setTransitionsCount(int value) {
        bitField0_ |= 0x00008000;
        transitionsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 transitions_count = 16;</code>
       */
      public Builder clearTransitionsCount() {
        bitField0_ = (bitField0_ & ~0x00008000);
        transitionsCount_ = 0;
        onChanged();
        return this;
      }

      // required int32 transversions_count = 17;
      private int transversionsCount_ ;
      /**
       * <code>required int32 transversions_count = 17;</code>
       */
      public boolean hasTransversionsCount() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required int32 transversions_count = 17;</code>
       */
      public int getTransversionsCount() {
        return transversionsCount_;
      }
      /**
       * <code>required int32 transversions_count = 17;</code>
       */
      public Builder setTransversionsCount(int value) {
        bitField0_ |= 0x00010000;
        transversionsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 transversions_count = 17;</code>
       */
      public Builder clearTransversionsCount() {
        bitField0_ = (bitField0_ & ~0x00010000);
        transversionsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 mendelian_errors = 18;
      private int mendelianErrors_ ;
      /**
       * <code>optional int32 mendelian_errors = 18;</code>
       *
       * <pre>
       * Number of mendelian errors found 
       * </pre>
       */
      public boolean hasMendelianErrors() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 mendelian_errors = 18;</code>
       *
       * <pre>
       * Number of mendelian errors found 
       * </pre>
       */
      public int getMendelianErrors() {
        return mendelianErrors_;
      }
      /**
       * <code>optional int32 mendelian_errors = 18;</code>
       *
       * <pre>
       * Number of mendelian errors found 
       * </pre>
       */
      public Builder setMendelianErrors(int value) {
        bitField0_ |= 0x00020000;
        mendelianErrors_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mendelian_errors = 18;</code>
       *
       * <pre>
       * Number of mendelian errors found 
       * </pre>
       */
      public Builder clearMendelianErrors() {
        bitField0_ = (bitField0_ & ~0x00020000);
        mendelianErrors_ = 0;
        onChanged();
        return this;
      }

      // optional float cases_percent_dominant = 19;
      private float casesPercentDominant_ ;
      /**
       * <code>optional float cases_percent_dominant = 19;</code>
       *
       * <pre>
       * Percentage of cases that follow a dominant inheritance pattern 
       * </pre>
       */
      public boolean hasCasesPercentDominant() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float cases_percent_dominant = 19;</code>
       *
       * <pre>
       * Percentage of cases that follow a dominant inheritance pattern 
       * </pre>
       */
      public float getCasesPercentDominant() {
        return casesPercentDominant_;
      }
      /**
       * <code>optional float cases_percent_dominant = 19;</code>
       *
       * <pre>
       * Percentage of cases that follow a dominant inheritance pattern 
       * </pre>
       */
      public Builder setCasesPercentDominant(float value) {
        bitField0_ |= 0x00040000;
        casesPercentDominant_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cases_percent_dominant = 19;</code>
       *
       * <pre>
       * Percentage of cases that follow a dominant inheritance pattern 
       * </pre>
       */
      public Builder clearCasesPercentDominant() {
        bitField0_ = (bitField0_ & ~0x00040000);
        casesPercentDominant_ = 0F;
        onChanged();
        return this;
      }

      // optional float controls_percent_dominant = 20;
      private float controlsPercentDominant_ ;
      /**
       * <code>optional float controls_percent_dominant = 20;</code>
       *
       * <pre>
       * Percentage of controls that follow a dominant inheritance pattern 
       * </pre>
       */
      public boolean hasControlsPercentDominant() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float controls_percent_dominant = 20;</code>
       *
       * <pre>
       * Percentage of controls that follow a dominant inheritance pattern 
       * </pre>
       */
      public float getControlsPercentDominant() {
        return controlsPercentDominant_;
      }
      /**
       * <code>optional float controls_percent_dominant = 20;</code>
       *
       * <pre>
       * Percentage of controls that follow a dominant inheritance pattern 
       * </pre>
       */
      public Builder setControlsPercentDominant(float value) {
        bitField0_ |= 0x00080000;
        controlsPercentDominant_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float controls_percent_dominant = 20;</code>
       *
       * <pre>
       * Percentage of controls that follow a dominant inheritance pattern 
       * </pre>
       */
      public Builder clearControlsPercentDominant() {
        bitField0_ = (bitField0_ & ~0x00080000);
        controlsPercentDominant_ = 0F;
        onChanged();
        return this;
      }

      // optional float cases_percent_recessive = 21;
      private float casesPercentRecessive_ ;
      /**
       * <code>optional float cases_percent_recessive = 21;</code>
       *
       * <pre>
       * Percentage of cases that follow a recessive inheritance pattern 
       * </pre>
       */
      public boolean hasCasesPercentRecessive() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float cases_percent_recessive = 21;</code>
       *
       * <pre>
       * Percentage of cases that follow a recessive inheritance pattern 
       * </pre>
       */
      public float getCasesPercentRecessive() {
        return casesPercentRecessive_;
      }
      /**
       * <code>optional float cases_percent_recessive = 21;</code>
       *
       * <pre>
       * Percentage of cases that follow a recessive inheritance pattern 
       * </pre>
       */
      public Builder setCasesPercentRecessive(float value) {
        bitField0_ |= 0x00100000;
        casesPercentRecessive_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cases_percent_recessive = 21;</code>
       *
       * <pre>
       * Percentage of cases that follow a recessive inheritance pattern 
       * </pre>
       */
      public Builder clearCasesPercentRecessive() {
        bitField0_ = (bitField0_ & ~0x00100000);
        casesPercentRecessive_ = 0F;
        onChanged();
        return this;
      }

      // optional float controls_percent_recessive = 22;
      private float controlsPercentRecessive_ ;
      /**
       * <code>optional float controls_percent_recessive = 22;</code>
       *
       * <pre>
       * Percentage of controls that follow a recessive inheritance pattern 
       * </pre>
       */
      public boolean hasControlsPercentRecessive() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float controls_percent_recessive = 22;</code>
       *
       * <pre>
       * Percentage of controls that follow a recessive inheritance pattern 
       * </pre>
       */
      public float getControlsPercentRecessive() {
        return controlsPercentRecessive_;
      }
      /**
       * <code>optional float controls_percent_recessive = 22;</code>
       *
       * <pre>
       * Percentage of controls that follow a recessive inheritance pattern 
       * </pre>
       */
      public Builder setControlsPercentRecessive(float value) {
        bitField0_ |= 0x00200000;
        controlsPercentRecessive_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float controls_percent_recessive = 22;</code>
       *
       * <pre>
       * Percentage of controls that follow a recessive inheritance pattern 
       * </pre>
       */
      public Builder clearControlsPercentRecessive() {
        bitField0_ = (bitField0_ & ~0x00200000);
        controlsPercentRecessive_ = 0F;
        onChanged();
        return this;
      }

      // optional float hardy_weinberg = 23;
      private float hardyWeinberg_ ;
      /**
       * <code>optional float hardy_weinberg = 23;</code>
       *
       * <pre>
       * All samples Hardy-Weinberg stats
       * </pre>
       */
      public boolean hasHardyWeinberg() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float hardy_weinberg = 23;</code>
       *
       * <pre>
       * All samples Hardy-Weinberg stats
       * </pre>
       */
      public float getHardyWeinberg() {
        return hardyWeinberg_;
      }
      /**
       * <code>optional float hardy_weinberg = 23;</code>
       *
       * <pre>
       * All samples Hardy-Weinberg stats
       * </pre>
       */
      public Builder setHardyWeinberg(float value) {
        bitField0_ |= 0x00400000;
        hardyWeinberg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float hardy_weinberg = 23;</code>
       *
       * <pre>
       * All samples Hardy-Weinberg stats
       * </pre>
       */
      public Builder clearHardyWeinberg() {
        bitField0_ = (bitField0_ & ~0x00400000);
        hardyWeinberg_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.opencb.biodata.models.variant.protobuf.VariantStats)
    }

    static {
      defaultInstance = new VariantStats(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.opencb.biodata.models.variant.protobuf.VariantStats)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022VariantStats.proto\022*org.opencb.biodata" +
      ".models.variant.protobuf\"\241\006\n\014VariantStat" +
      "s\022\030\n\020ref_allele_count\030\001 \002(\005\022\030\n\020alt_allel" +
      "e_count\030\002 \002(\005\022W\n\017genotypes_count\030\003 \003(\0132>" +
      ".org.opencb.biodata.models.variant.proto" +
      "buf.VariantStats.Count\022\027\n\017ref_allele_fre" +
      "q\030\004 \002(\002\022\027\n\017alt_allele_freq\030\005 \002(\002\022Z\n\016geno" +
      "types_freq\030\006 \003(\0132B.org.opencb.biodata.mo" +
      "dels.variant.protobuf.VariantStats.Frequ" +
      "ency\022\027\n\017missing_alleles\030\007 \002(\005\022\031\n\021missing",
      "_genotypes\030\010 \002(\005\022\013\n\003maf\030\t \002(\002\022\013\n\003mgf\030\n \002" +
      "(\002\022\021\n\tmafAllele\030\013 \002(\t\022\023\n\013mgfGenotype\030\014 \002" +
      "(\t\022\026\n\016passed_filters\030\r \002(\010\022\017\n\007quality\030\016 " +
      "\002(\002\022\023\n\013num_samples\030\017 \002(\005\022\031\n\021transitions_" +
      "count\030\020 \002(\005\022\033\n\023transversions_count\030\021 \002(\005" +
      "\022\030\n\020mendelian_errors\030\022 \001(\005\022\036\n\026cases_perc" +
      "ent_dominant\030\023 \001(\002\022!\n\031controls_percent_d" +
      "ominant\030\024 \001(\002\022\037\n\027cases_percent_recessive" +
      "\030\025 \001(\002\022\"\n\032controls_percent_recessive\030\026 \001" +
      "(\002\022\026\n\016hardy_weinberg\030\027 \001(\002\032#\n\005Count\022\013\n\003k",
      "ey\030\001 \002(\t\022\r\n\005count\030\002 \002(\005\032+\n\tFrequency\022\013\n\003" +
      "key\030\001 \002(\t\022\021\n\tfrequency\030\002 \002(\002B\024B\022VariantS" +
      "tatsProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor,
              new java.lang.String[] { "RefAlleleCount", "AltAlleleCount", "GenotypesCount", "RefAlleleFreq", "AltAlleleFreq", "GenotypesFreq", "MissingAlleles", "MissingGenotypes", "Maf", "Mgf", "MafAllele", "MgfGenotype", "PassedFilters", "Quality", "NumSamples", "TransitionsCount", "TransversionsCount", "MendelianErrors", "CasesPercentDominant", "ControlsPercentDominant", "CasesPercentRecessive", "ControlsPercentRecessive", "HardyWeinberg", });
          internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_descriptor =
            internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor.getNestedTypes().get(0);
          internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Count_descriptor,
              new java.lang.String[] { "Key", "Count", });
          internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_descriptor =
            internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_descriptor.getNestedTypes().get(1);
          internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_opencb_biodata_models_variant_protobuf_VariantStats_Frequency_descriptor,
              new java.lang.String[] { "Key", "Frequency", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
