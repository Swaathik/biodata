/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Cosmic extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cosmic\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"mutationID\",\"type\":[\"null\",\"string\"]},{\"name\":\"primarySite\",\"type\":[\"null\",\"string\"]},{\"name\":\"primaryHistology\",\"type\":[\"null\",\"string\"]},{\"name\":\"histologySubtype\",\"type\":[\"null\",\"string\"]},{\"name\":\"sampleSource\",\"type\":[\"null\",\"string\"]},{\"name\":\"tumourOrigin\",\"type\":[\"null\",\"string\"]},{\"name\":\"geneName\",\"type\":[\"null\",\"string\"]},{\"name\":\"mutationSomaticStatus\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence mutationID;
   private java.lang.CharSequence primarySite;
   private java.lang.CharSequence primaryHistology;
   private java.lang.CharSequence histologySubtype;
   private java.lang.CharSequence sampleSource;
   private java.lang.CharSequence tumourOrigin;
   private java.lang.CharSequence geneName;
   private java.lang.CharSequence mutationSomaticStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Cosmic() {}

  /**
   * All-args constructor.
   */
  public Cosmic(java.lang.CharSequence mutationID, java.lang.CharSequence primarySite, java.lang.CharSequence primaryHistology, java.lang.CharSequence histologySubtype, java.lang.CharSequence sampleSource, java.lang.CharSequence tumourOrigin, java.lang.CharSequence geneName, java.lang.CharSequence mutationSomaticStatus) {
    this.mutationID = mutationID;
    this.primarySite = primarySite;
    this.primaryHistology = primaryHistology;
    this.histologySubtype = histologySubtype;
    this.sampleSource = sampleSource;
    this.tumourOrigin = tumourOrigin;
    this.geneName = geneName;
    this.mutationSomaticStatus = mutationSomaticStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mutationID;
    case 1: return primarySite;
    case 2: return primaryHistology;
    case 3: return histologySubtype;
    case 4: return sampleSource;
    case 5: return tumourOrigin;
    case 6: return geneName;
    case 7: return mutationSomaticStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mutationID = (java.lang.CharSequence)value$; break;
    case 1: primarySite = (java.lang.CharSequence)value$; break;
    case 2: primaryHistology = (java.lang.CharSequence)value$; break;
    case 3: histologySubtype = (java.lang.CharSequence)value$; break;
    case 4: sampleSource = (java.lang.CharSequence)value$; break;
    case 5: tumourOrigin = (java.lang.CharSequence)value$; break;
    case 6: geneName = (java.lang.CharSequence)value$; break;
    case 7: mutationSomaticStatus = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mutationID' field.
   */
  public java.lang.CharSequence getMutationID() {
    return mutationID;
  }

  /**
   * Sets the value of the 'mutationID' field.
   * @param value the value to set.
   */
  public void setMutationID(java.lang.CharSequence value) {
    this.mutationID = value;
  }

  /**
   * Gets the value of the 'primarySite' field.
   */
  public java.lang.CharSequence getPrimarySite() {
    return primarySite;
  }

  /**
   * Sets the value of the 'primarySite' field.
   * @param value the value to set.
   */
  public void setPrimarySite(java.lang.CharSequence value) {
    this.primarySite = value;
  }

  /**
   * Gets the value of the 'primaryHistology' field.
   */
  public java.lang.CharSequence getPrimaryHistology() {
    return primaryHistology;
  }

  /**
   * Sets the value of the 'primaryHistology' field.
   * @param value the value to set.
   */
  public void setPrimaryHistology(java.lang.CharSequence value) {
    this.primaryHistology = value;
  }

  /**
   * Gets the value of the 'histologySubtype' field.
   */
  public java.lang.CharSequence getHistologySubtype() {
    return histologySubtype;
  }

  /**
   * Sets the value of the 'histologySubtype' field.
   * @param value the value to set.
   */
  public void setHistologySubtype(java.lang.CharSequence value) {
    this.histologySubtype = value;
  }

  /**
   * Gets the value of the 'sampleSource' field.
   */
  public java.lang.CharSequence getSampleSource() {
    return sampleSource;
  }

  /**
   * Sets the value of the 'sampleSource' field.
   * @param value the value to set.
   */
  public void setSampleSource(java.lang.CharSequence value) {
    this.sampleSource = value;
  }

  /**
   * Gets the value of the 'tumourOrigin' field.
   */
  public java.lang.CharSequence getTumourOrigin() {
    return tumourOrigin;
  }

  /**
   * Sets the value of the 'tumourOrigin' field.
   * @param value the value to set.
   */
  public void setTumourOrigin(java.lang.CharSequence value) {
    this.tumourOrigin = value;
  }

  /**
   * Gets the value of the 'geneName' field.
   */
  public java.lang.CharSequence getGeneName() {
    return geneName;
  }

  /**
   * Sets the value of the 'geneName' field.
   * @param value the value to set.
   */
  public void setGeneName(java.lang.CharSequence value) {
    this.geneName = value;
  }

  /**
   * Gets the value of the 'mutationSomaticStatus' field.
   */
  public java.lang.CharSequence getMutationSomaticStatus() {
    return mutationSomaticStatus;
  }

  /**
   * Sets the value of the 'mutationSomaticStatus' field.
   * @param value the value to set.
   */
  public void setMutationSomaticStatus(java.lang.CharSequence value) {
    this.mutationSomaticStatus = value;
  }

  /** Creates a new Cosmic RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.Cosmic.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.Cosmic.Builder();
  }
  
  /** Creates a new Cosmic RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.Cosmic.Builder newBuilder(org.opencb.biodata.models.variant.avro.Cosmic.Builder other) {
    return new org.opencb.biodata.models.variant.avro.Cosmic.Builder(other);
  }
  
  /** Creates a new Cosmic RecordBuilder by copying an existing Cosmic instance */
  public static org.opencb.biodata.models.variant.avro.Cosmic.Builder newBuilder(org.opencb.biodata.models.variant.avro.Cosmic other) {
    return new org.opencb.biodata.models.variant.avro.Cosmic.Builder(other);
  }
  
  /**
   * RecordBuilder for Cosmic instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cosmic>
    implements org.apache.avro.data.RecordBuilder<Cosmic> {

    private java.lang.CharSequence mutationID;
    private java.lang.CharSequence primarySite;
    private java.lang.CharSequence primaryHistology;
    private java.lang.CharSequence histologySubtype;
    private java.lang.CharSequence sampleSource;
    private java.lang.CharSequence tumourOrigin;
    private java.lang.CharSequence geneName;
    private java.lang.CharSequence mutationSomaticStatus;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.Cosmic.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.Cosmic.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mutationID)) {
        this.mutationID = data().deepCopy(fields()[0].schema(), other.mutationID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.primarySite)) {
        this.primarySite = data().deepCopy(fields()[1].schema(), other.primarySite);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.primaryHistology)) {
        this.primaryHistology = data().deepCopy(fields()[2].schema(), other.primaryHistology);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.histologySubtype)) {
        this.histologySubtype = data().deepCopy(fields()[3].schema(), other.histologySubtype);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sampleSource)) {
        this.sampleSource = data().deepCopy(fields()[4].schema(), other.sampleSource);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tumourOrigin)) {
        this.tumourOrigin = data().deepCopy(fields()[5].schema(), other.tumourOrigin);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.geneName)) {
        this.geneName = data().deepCopy(fields()[6].schema(), other.geneName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mutationSomaticStatus)) {
        this.mutationSomaticStatus = data().deepCopy(fields()[7].schema(), other.mutationSomaticStatus);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Cosmic instance */
    private Builder(org.opencb.biodata.models.variant.avro.Cosmic other) {
            super(org.opencb.biodata.models.variant.avro.Cosmic.SCHEMA$);
      if (isValidValue(fields()[0], other.mutationID)) {
        this.mutationID = data().deepCopy(fields()[0].schema(), other.mutationID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.primarySite)) {
        this.primarySite = data().deepCopy(fields()[1].schema(), other.primarySite);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.primaryHistology)) {
        this.primaryHistology = data().deepCopy(fields()[2].schema(), other.primaryHistology);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.histologySubtype)) {
        this.histologySubtype = data().deepCopy(fields()[3].schema(), other.histologySubtype);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sampleSource)) {
        this.sampleSource = data().deepCopy(fields()[4].schema(), other.sampleSource);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tumourOrigin)) {
        this.tumourOrigin = data().deepCopy(fields()[5].schema(), other.tumourOrigin);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.geneName)) {
        this.geneName = data().deepCopy(fields()[6].schema(), other.geneName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mutationSomaticStatus)) {
        this.mutationSomaticStatus = data().deepCopy(fields()[7].schema(), other.mutationSomaticStatus);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'mutationID' field */
    public java.lang.CharSequence getMutationID() {
      return mutationID;
    }
    
    /** Sets the value of the 'mutationID' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setMutationID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.mutationID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'mutationID' field has been set */
    public boolean hasMutationID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'mutationID' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearMutationID() {
      mutationID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'primarySite' field */
    public java.lang.CharSequence getPrimarySite() {
      return primarySite;
    }
    
    /** Sets the value of the 'primarySite' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setPrimarySite(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.primarySite = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'primarySite' field has been set */
    public boolean hasPrimarySite() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'primarySite' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearPrimarySite() {
      primarySite = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'primaryHistology' field */
    public java.lang.CharSequence getPrimaryHistology() {
      return primaryHistology;
    }
    
    /** Sets the value of the 'primaryHistology' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setPrimaryHistology(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.primaryHistology = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'primaryHistology' field has been set */
    public boolean hasPrimaryHistology() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'primaryHistology' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearPrimaryHistology() {
      primaryHistology = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'histologySubtype' field */
    public java.lang.CharSequence getHistologySubtype() {
      return histologySubtype;
    }
    
    /** Sets the value of the 'histologySubtype' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setHistologySubtype(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.histologySubtype = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'histologySubtype' field has been set */
    public boolean hasHistologySubtype() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'histologySubtype' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearHistologySubtype() {
      histologySubtype = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'sampleSource' field */
    public java.lang.CharSequence getSampleSource() {
      return sampleSource;
    }
    
    /** Sets the value of the 'sampleSource' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setSampleSource(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.sampleSource = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sampleSource' field has been set */
    public boolean hasSampleSource() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sampleSource' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearSampleSource() {
      sampleSource = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'tumourOrigin' field */
    public java.lang.CharSequence getTumourOrigin() {
      return tumourOrigin;
    }
    
    /** Sets the value of the 'tumourOrigin' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setTumourOrigin(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.tumourOrigin = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'tumourOrigin' field has been set */
    public boolean hasTumourOrigin() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'tumourOrigin' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearTumourOrigin() {
      tumourOrigin = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'geneName' field */
    public java.lang.CharSequence getGeneName() {
      return geneName;
    }
    
    /** Sets the value of the 'geneName' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setGeneName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.geneName = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'geneName' field has been set */
    public boolean hasGeneName() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'geneName' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearGeneName() {
      geneName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'mutationSomaticStatus' field */
    public java.lang.CharSequence getMutationSomaticStatus() {
      return mutationSomaticStatus;
    }
    
    /** Sets the value of the 'mutationSomaticStatus' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder setMutationSomaticStatus(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.mutationSomaticStatus = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'mutationSomaticStatus' field has been set */
    public boolean hasMutationSomaticStatus() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'mutationSomaticStatus' field */
    public org.opencb.biodata.models.variant.avro.Cosmic.Builder clearMutationSomaticStatus() {
      mutationSomaticStatus = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Cosmic build() {
      try {
        Cosmic record = new Cosmic();
        record.mutationID = fieldSetFlags()[0] ? this.mutationID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.primarySite = fieldSetFlags()[1] ? this.primarySite : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.primaryHistology = fieldSetFlags()[2] ? this.primaryHistology : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.histologySubtype = fieldSetFlags()[3] ? this.histologySubtype : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.sampleSource = fieldSetFlags()[4] ? this.sampleSource : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.tumourOrigin = fieldSetFlags()[5] ? this.tumourOrigin : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.geneName = fieldSetFlags()[6] ? this.geneName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.mutationSomaticStatus = fieldSetFlags()[7] ? this.mutationSomaticStatus : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
