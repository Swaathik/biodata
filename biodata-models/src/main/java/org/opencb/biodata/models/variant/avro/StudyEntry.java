/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StudyEntry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StudyEntry\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"studyId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"* Unique identifier of the study.\"},{\"name\":\"files\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FileEntry\",\"fields\":[{\"name\":\"fileId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"* Unique identifier of the source file.\"},{\"name\":\"call\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"* Original call position for the variant, if the file was normalized.\\n         *\\n         * {position}:{reference}:{alternate}(,{other_alternate})*:{allele_index}\"},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"* Optional attributes that probably depend on the format of the file the\\n         * variant was initially read from.\"}]}},\"doc\":\"* List of files from the study where the variant was present.\",\"default\":[]},{\"name\":\"secondaryAlternates\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AlternateCoordinate\",\"fields\":[{\"name\":\"chromosome\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"start\",\"type\":[\"null\",\"int\"]},{\"name\":\"end\",\"type\":[\"null\",\"int\"]},{\"name\":\"reference\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"VariantType\",\"doc\":\"* Type of variation, which depends mostly on its length.\\n     * <ul>\\n     * <li>SNVs involve a single nucleotide, without changes in length</li>\\n     * <li>MNVs involve multiple nucleotides, without changes in length</li>\\n     * <li>Indels are insertions or deletions of less than SV_THRESHOLD (50) nucleotides</li>\\n     * <li>Structural variations are large changes of more than SV_THRESHOLD nucleotides</li>\\n     * <li>Copy-number variations alter the number of copies of a region</li>\\n     * </ul>\",\"symbols\":[\"SNV\",\"SNP\",\"MNV\",\"MNP\",\"INDEL\",\"SV\",\"INSERTION\",\"DELETION\",\"TRANSLOCATION\",\"INVERSION\",\"CNV\",\"NO_VARIATION\",\"SYMBOLIC\",\"MIXED\"]}}]}}],\"doc\":\"* Alternate alleles that appear along with a variant alternate.\",\"default\":null},{\"name\":\"format\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"* Fields stored for each sample.\"},{\"name\":\"samplesData\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},\"doc\":\"* Genotypes and other sample-related information. Each position is related\\n         * with one sample. The content are lists of values in the same order than the\\n         * format array. The length of this lists must be the same as the format field.\"},{\"name\":\"stats\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"VariantStats\",\"fields\":[{\"name\":\"refAllele\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"altAllele\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"refAlleleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"altAlleleCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"genotypesCount\",\"type\":{\"type\":\"map\",\"values\":\"int\",\"avro.java.string\":\"String\",\"java-key-class\":\"org.opencb.biodata.models.feature.Genotype\"}},{\"name\":\"genotypesFreq\",\"type\":{\"type\":\"map\",\"values\":\"float\",\"avro.java.string\":\"String\",\"java-key-class\":\"org.opencb.biodata.models.feature.Genotype\"}},{\"name\":\"missingAlleles\",\"type\":[\"null\",\"int\"]},{\"name\":\"missingGenotypes\",\"type\":[\"null\",\"int\"]},{\"name\":\"refAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"maf\",\"type\":[\"null\",\"float\"]},{\"name\":\"mgf\",\"type\":[\"null\",\"float\"]},{\"name\":\"mafAllele\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"mgfGenotype\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"passedFilters\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"mendelianErrors\",\"type\":[\"null\",\"int\"]},{\"name\":\"casesPercentDominant\",\"type\":[\"null\",\"float\"]},{\"name\":\"controlsPercentDominant\",\"type\":[\"null\",\"float\"]},{\"name\":\"casesPercentRecessive\",\"type\":[\"null\",\"float\"]},{\"name\":\"controlsPercentRecessive\",\"type\":[\"null\",\"float\"]},{\"name\":\"quality\",\"type\":[\"null\",\"float\"]},{\"name\":\"numSamples\",\"type\":[\"null\",\"int\"]},{\"name\":\"variantType\",\"type\":\"VariantType\"},{\"name\":\"hw\",\"type\":{\"type\":\"record\",\"name\":\"VariantHardyWeinbergStats\",\"fields\":[{\"name\":\"chi2\",\"type\":[\"null\",\"float\"]},{\"name\":\"pValue\",\"type\":[\"null\",\"float\"]},{\"name\":\"n\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_AA_11\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_Aa_10\",\"type\":[\"null\",\"int\"]},{\"name\":\"n_aa_00\",\"type\":[\"null\",\"int\"]},{\"name\":\"e_AA_11\",\"type\":[\"null\",\"float\"]},{\"name\":\"e_Aa_10\",\"type\":[\"null\",\"float\"]},{\"name\":\"e_aa_00\",\"type\":[\"null\",\"float\"]},{\"name\":\"p\",\"type\":[\"null\",\"float\"]},{\"name\":\"q\",\"type\":[\"null\",\"float\"]}]}}]},\"avro.java.string\":\"String\"},\"doc\":\"* Statistics of the genomic variation, such as its alleles/genotypes count\\n         * or its minimum allele frequency, grouped by cohort name.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** * Unique identifier of the study. */
   private java.lang.String studyId;
  /** * List of files from the study where the variant was present. */
   private java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> files;
  /** * Alternate alleles that appear along with a variant alternate. */
   private java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> secondaryAlternates;
  /** * Fields stored for each sample. */
   private java.util.List<java.lang.String> format;
  /** * Genotypes and other sample-related information. Each position is related
         * with one sample. The content are lists of values in the same order than the
         * format array. The length of this lists must be the same as the format field. */
   private java.util.List<java.util.List<java.lang.String>> samplesData;
  /** * Statistics of the genomic variation, such as its alleles/genotypes count
         * or its minimum allele frequency, grouped by cohort name. */
   private java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> stats;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public StudyEntry() {}

  /**
   * All-args constructor.
   */
  public StudyEntry(java.lang.String studyId, java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> files, java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> secondaryAlternates, java.util.List<java.lang.String> format, java.util.List<java.util.List<java.lang.String>> samplesData, java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> stats) {
    this.studyId = studyId;
    this.files = files;
    this.secondaryAlternates = secondaryAlternates;
    this.format = format;
    this.samplesData = samplesData;
    this.stats = stats;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return studyId;
    case 1: return files;
    case 2: return secondaryAlternates;
    case 3: return format;
    case 4: return samplesData;
    case 5: return stats;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: studyId = (java.lang.String)value$; break;
    case 1: files = (java.util.List<org.opencb.biodata.models.variant.avro.FileEntry>)value$; break;
    case 2: secondaryAlternates = (java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate>)value$; break;
    case 3: format = (java.util.List<java.lang.String>)value$; break;
    case 4: samplesData = (java.util.List<java.util.List<java.lang.String>>)value$; break;
    case 5: stats = (java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'studyId' field.
   * * Unique identifier of the study.   */
  public java.lang.String getStudyId() {
    return studyId;
  }

  /**
   * Sets the value of the 'studyId' field.
   * * Unique identifier of the study.   * @param value the value to set.
   */
  public void setStudyId(java.lang.String value) {
    this.studyId = value;
  }

  /**
   * Gets the value of the 'files' field.
   * * List of files from the study where the variant was present.   */
  public java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> getFiles() {
    return files;
  }

  /**
   * Sets the value of the 'files' field.
   * * List of files from the study where the variant was present.   * @param value the value to set.
   */
  public void setFiles(java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> value) {
    this.files = value;
  }

  /**
   * Gets the value of the 'secondaryAlternates' field.
   * * Alternate alleles that appear along with a variant alternate.   */
  public java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> getSecondaryAlternates() {
    return secondaryAlternates;
  }

  /**
   * Sets the value of the 'secondaryAlternates' field.
   * * Alternate alleles that appear along with a variant alternate.   * @param value the value to set.
   */
  public void setSecondaryAlternates(java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> value) {
    this.secondaryAlternates = value;
  }

  /**
   * Gets the value of the 'format' field.
   * * Fields stored for each sample.   */
  public java.util.List<java.lang.String> getFormat() {
    return format;
  }

  /**
   * Sets the value of the 'format' field.
   * * Fields stored for each sample.   * @param value the value to set.
   */
  public void setFormat(java.util.List<java.lang.String> value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'samplesData' field.
   * * Genotypes and other sample-related information. Each position is related
         * with one sample. The content are lists of values in the same order than the
         * format array. The length of this lists must be the same as the format field.   */
  public java.util.List<java.util.List<java.lang.String>> getSamplesData() {
    return samplesData;
  }

  /**
   * Sets the value of the 'samplesData' field.
   * * Genotypes and other sample-related information. Each position is related
         * with one sample. The content are lists of values in the same order than the
         * format array. The length of this lists must be the same as the format field.   * @param value the value to set.
   */
  public void setSamplesData(java.util.List<java.util.List<java.lang.String>> value) {
    this.samplesData = value;
  }

  /**
   * Gets the value of the 'stats' field.
   * * Statistics of the genomic variation, such as its alleles/genotypes count
         * or its minimum allele frequency, grouped by cohort name.   */
  public java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> getStats() {
    return stats;
  }

  /**
   * Sets the value of the 'stats' field.
   * * Statistics of the genomic variation, such as its alleles/genotypes count
         * or its minimum allele frequency, grouped by cohort name.   * @param value the value to set.
   */
  public void setStats(java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> value) {
    this.stats = value;
  }

  /** Creates a new StudyEntry RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.StudyEntry.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.StudyEntry.Builder();
  }
  
  /** Creates a new StudyEntry RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.StudyEntry.Builder newBuilder(org.opencb.biodata.models.variant.avro.StudyEntry.Builder other) {
    return new org.opencb.biodata.models.variant.avro.StudyEntry.Builder(other);
  }
  
  /** Creates a new StudyEntry RecordBuilder by copying an existing StudyEntry instance */
  public static org.opencb.biodata.models.variant.avro.StudyEntry.Builder newBuilder(org.opencb.biodata.models.variant.avro.StudyEntry other) {
    return new org.opencb.biodata.models.variant.avro.StudyEntry.Builder(other);
  }
  
  /**
   * RecordBuilder for StudyEntry instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StudyEntry>
    implements org.apache.avro.data.RecordBuilder<StudyEntry> {

    private java.lang.String studyId;
    private java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> files;
    private java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> secondaryAlternates;
    private java.util.List<java.lang.String> format;
    private java.util.List<java.util.List<java.lang.String>> samplesData;
    private java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> stats;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.StudyEntry.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.StudyEntry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.studyId)) {
        this.studyId = data().deepCopy(fields()[0].schema(), other.studyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.files)) {
        this.files = data().deepCopy(fields()[1].schema(), other.files);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.secondaryAlternates)) {
        this.secondaryAlternates = data().deepCopy(fields()[2].schema(), other.secondaryAlternates);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.format)) {
        this.format = data().deepCopy(fields()[3].schema(), other.format);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.samplesData)) {
        this.samplesData = data().deepCopy(fields()[4].schema(), other.samplesData);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stats)) {
        this.stats = data().deepCopy(fields()[5].schema(), other.stats);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing StudyEntry instance */
    private Builder(org.opencb.biodata.models.variant.avro.StudyEntry other) {
            super(org.opencb.biodata.models.variant.avro.StudyEntry.SCHEMA$);
      if (isValidValue(fields()[0], other.studyId)) {
        this.studyId = data().deepCopy(fields()[0].schema(), other.studyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.files)) {
        this.files = data().deepCopy(fields()[1].schema(), other.files);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.secondaryAlternates)) {
        this.secondaryAlternates = data().deepCopy(fields()[2].schema(), other.secondaryAlternates);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.format)) {
        this.format = data().deepCopy(fields()[3].schema(), other.format);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.samplesData)) {
        this.samplesData = data().deepCopy(fields()[4].schema(), other.samplesData);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stats)) {
        this.stats = data().deepCopy(fields()[5].schema(), other.stats);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'studyId' field */
    public java.lang.String getStudyId() {
      return studyId;
    }
    
    /** Sets the value of the 'studyId' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder setStudyId(java.lang.String value) {
      validate(fields()[0], value);
      this.studyId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'studyId' field has been set */
    public boolean hasStudyId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'studyId' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder clearStudyId() {
      studyId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'files' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> getFiles() {
      return files;
    }
    
    /** Sets the value of the 'files' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder setFiles(java.util.List<org.opencb.biodata.models.variant.avro.FileEntry> value) {
      validate(fields()[1], value);
      this.files = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'files' field has been set */
    public boolean hasFiles() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'files' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder clearFiles() {
      files = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'secondaryAlternates' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> getSecondaryAlternates() {
      return secondaryAlternates;
    }
    
    /** Sets the value of the 'secondaryAlternates' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder setSecondaryAlternates(java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate> value) {
      validate(fields()[2], value);
      this.secondaryAlternates = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'secondaryAlternates' field has been set */
    public boolean hasSecondaryAlternates() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'secondaryAlternates' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder clearSecondaryAlternates() {
      secondaryAlternates = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'format' field */
    public java.util.List<java.lang.String> getFormat() {
      return format;
    }
    
    /** Sets the value of the 'format' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder setFormat(java.util.List<java.lang.String> value) {
      validate(fields()[3], value);
      this.format = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'format' field has been set */
    public boolean hasFormat() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'format' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder clearFormat() {
      format = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'samplesData' field */
    public java.util.List<java.util.List<java.lang.String>> getSamplesData() {
      return samplesData;
    }
    
    /** Sets the value of the 'samplesData' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder setSamplesData(java.util.List<java.util.List<java.lang.String>> value) {
      validate(fields()[4], value);
      this.samplesData = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'samplesData' field has been set */
    public boolean hasSamplesData() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'samplesData' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder clearSamplesData() {
      samplesData = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'stats' field */
    public java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> getStats() {
      return stats;
    }
    
    /** Sets the value of the 'stats' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder setStats(java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats> value) {
      validate(fields()[5], value);
      this.stats = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'stats' field has been set */
    public boolean hasStats() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'stats' field */
    public org.opencb.biodata.models.variant.avro.StudyEntry.Builder clearStats() {
      stats = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public StudyEntry build() {
      try {
        StudyEntry record = new StudyEntry();
        record.studyId = fieldSetFlags()[0] ? this.studyId : (java.lang.String) defaultValue(fields()[0]);
        record.files = fieldSetFlags()[1] ? this.files : (java.util.List<org.opencb.biodata.models.variant.avro.FileEntry>) defaultValue(fields()[1]);
        record.secondaryAlternates = fieldSetFlags()[2] ? this.secondaryAlternates : (java.util.List<org.opencb.biodata.models.variant.avro.AlternateCoordinate>) defaultValue(fields()[2]);
        record.format = fieldSetFlags()[3] ? this.format : (java.util.List<java.lang.String>) defaultValue(fields()[3]);
        record.samplesData = fieldSetFlags()[4] ? this.samplesData : (java.util.List<java.util.List<java.lang.String>>) defaultValue(fields()[4]);
        record.stats = fieldSetFlags()[5] ? this.stats : (java.util.Map<java.lang.String,org.opencb.biodata.models.variant.avro.VariantStats>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
