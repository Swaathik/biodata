/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlternateCoordinate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlternateCoordinate\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"chromosome\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"start\",\"type\":[\"null\",\"int\"]},{\"name\":\"end\",\"type\":[\"null\",\"int\"]},{\"name\":\"reference\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"alternate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"VariantType\",\"doc\":\"* Type of variation, which depends mostly on its length.\\n     * <ul>\\n     * <li>SNVs involve a single nucleotide, without changes in length</li>\\n     * <li>MNVs involve multiple nucleotides, without changes in length</li>\\n     * <li>Indels are insertions or deletions of less than SV_THRESHOLD (50) nucleotides</li>\\n     * <li>Structural variations are large changes of more than SV_THRESHOLD nucleotides</li>\\n     * <li>Copy-number variations alter the number of copies of a region</li>\\n     * </ul>\",\"symbols\":[\"SNV\",\"SNP\",\"MNV\",\"MNP\",\"INDEL\",\"SV\",\"INSERTION\",\"DELETION\",\"TRANSLOCATION\",\"INVERSION\",\"CNV\",\"NO_VARIATION\",\"SYMBOLIC\",\"MIXED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String chromosome;
   private java.lang.Integer start;
   private java.lang.Integer end;
   private java.lang.String reference;
   private java.lang.String alternate;
   private org.opencb.biodata.models.variant.avro.VariantType type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AlternateCoordinate() {}

  /**
   * All-args constructor.
   */
  public AlternateCoordinate(java.lang.String chromosome, java.lang.Integer start, java.lang.Integer end, java.lang.String reference, java.lang.String alternate, org.opencb.biodata.models.variant.avro.VariantType type) {
    this.chromosome = chromosome;
    this.start = start;
    this.end = end;
    this.reference = reference;
    this.alternate = alternate;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chromosome;
    case 1: return start;
    case 2: return end;
    case 3: return reference;
    case 4: return alternate;
    case 5: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chromosome = (java.lang.String)value$; break;
    case 1: start = (java.lang.Integer)value$; break;
    case 2: end = (java.lang.Integer)value$; break;
    case 3: reference = (java.lang.String)value$; break;
    case 4: alternate = (java.lang.String)value$; break;
    case 5: type = (org.opencb.biodata.models.variant.avro.VariantType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'chromosome' field.
   */
  public java.lang.String getChromosome() {
    return chromosome;
  }

  /**
   * Sets the value of the 'chromosome' field.
   * @param value the value to set.
   */
  public void setChromosome(java.lang.String value) {
    this.chromosome = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Integer value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'reference' field.
   */
  public java.lang.String getReference() {
    return reference;
  }

  /**
   * Sets the value of the 'reference' field.
   * @param value the value to set.
   */
  public void setReference(java.lang.String value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'alternate' field.
   */
  public java.lang.String getAlternate() {
    return alternate;
  }

  /**
   * Sets the value of the 'alternate' field.
   * @param value the value to set.
   */
  public void setAlternate(java.lang.String value) {
    this.alternate = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public org.opencb.biodata.models.variant.avro.VariantType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(org.opencb.biodata.models.variant.avro.VariantType value) {
    this.type = value;
  }

  /** Creates a new AlternateCoordinate RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder();
  }
  
  /** Creates a new AlternateCoordinate RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder newBuilder(org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder other) {
    return new org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder(other);
  }
  
  /** Creates a new AlternateCoordinate RecordBuilder by copying an existing AlternateCoordinate instance */
  public static org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder newBuilder(org.opencb.biodata.models.variant.avro.AlternateCoordinate other) {
    return new org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder(other);
  }
  
  /**
   * RecordBuilder for AlternateCoordinate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlternateCoordinate>
    implements org.apache.avro.data.RecordBuilder<AlternateCoordinate> {

    private java.lang.String chromosome;
    private java.lang.Integer start;
    private java.lang.Integer end;
    private java.lang.String reference;
    private java.lang.String alternate;
    private org.opencb.biodata.models.variant.avro.VariantType type;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.AlternateCoordinate.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[0].schema(), other.chromosome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.end)) {
        this.end = data().deepCopy(fields()[2].schema(), other.end);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reference)) {
        this.reference = data().deepCopy(fields()[3].schema(), other.reference);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alternate)) {
        this.alternate = data().deepCopy(fields()[4].schema(), other.alternate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AlternateCoordinate instance */
    private Builder(org.opencb.biodata.models.variant.avro.AlternateCoordinate other) {
            super(org.opencb.biodata.models.variant.avro.AlternateCoordinate.SCHEMA$);
      if (isValidValue(fields()[0], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[0].schema(), other.chromosome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.end)) {
        this.end = data().deepCopy(fields()[2].schema(), other.end);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reference)) {
        this.reference = data().deepCopy(fields()[3].schema(), other.reference);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alternate)) {
        this.alternate = data().deepCopy(fields()[4].schema(), other.alternate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.type)) {
        this.type = data().deepCopy(fields()[5].schema(), other.type);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'chromosome' field */
    public java.lang.String getChromosome() {
      return chromosome;
    }
    
    /** Sets the value of the 'chromosome' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder setChromosome(java.lang.String value) {
      validate(fields()[0], value);
      this.chromosome = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'chromosome' field has been set */
    public boolean hasChromosome() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'chromosome' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder clearChromosome() {
      chromosome = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Integer getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder setStart(java.lang.Integer value) {
      validate(fields()[1], value);
      this.start = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'start' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder clearStart() {
      start = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Integer getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder setEnd(java.lang.Integer value) {
      validate(fields()[2], value);
      this.end = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'end' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder clearEnd() {
      end = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'reference' field */
    public java.lang.String getReference() {
      return reference;
    }
    
    /** Sets the value of the 'reference' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder setReference(java.lang.String value) {
      validate(fields()[3], value);
      this.reference = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'reference' field has been set */
    public boolean hasReference() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'reference' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder clearReference() {
      reference = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'alternate' field */
    public java.lang.String getAlternate() {
      return alternate;
    }
    
    /** Sets the value of the 'alternate' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder setAlternate(java.lang.String value) {
      validate(fields()[4], value);
      this.alternate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'alternate' field has been set */
    public boolean hasAlternate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'alternate' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder clearAlternate() {
      alternate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public org.opencb.biodata.models.variant.avro.VariantType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder setType(org.opencb.biodata.models.variant.avro.VariantType value) {
      validate(fields()[5], value);
      this.type = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'type' field */
    public org.opencb.biodata.models.variant.avro.AlternateCoordinate.Builder clearType() {
      type = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AlternateCoordinate build() {
      try {
        AlternateCoordinate record = new AlternateCoordinate();
        record.chromosome = fieldSetFlags()[0] ? this.chromosome : (java.lang.String) defaultValue(fields()[0]);
        record.start = fieldSetFlags()[1] ? this.start : (java.lang.Integer) defaultValue(fields()[1]);
        record.end = fieldSetFlags()[2] ? this.end : (java.lang.Integer) defaultValue(fields()[2]);
        record.reference = fieldSetFlags()[3] ? this.reference : (java.lang.String) defaultValue(fields()[3]);
        record.alternate = fieldSetFlags()[4] ? this.alternate : (java.lang.String) defaultValue(fields()[4]);
        record.type = fieldSetFlags()[5] ? this.type : (org.opencb.biodata.models.variant.avro.VariantType) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
