/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantAnnotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantAnnotation\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"chromosome\",\"type\":[\"null\",\"string\"]},{\"name\":\"start\",\"type\":[\"null\",\"int\"]},{\"name\":\"end\",\"type\":[\"null\",\"int\"]},{\"name\":\"reference\",\"type\":[\"null\",\"string\"]},{\"name\":\"alternate\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"xrefs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Xref\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"src\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"hgvs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"consequenceTypes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ConsequenceType\",\"fields\":[{\"name\":\"geneName\",\"type\":[\"null\",\"string\"]},{\"name\":\"ensemblGeneId\",\"type\":[\"null\",\"string\"]},{\"name\":\"ensemblTranscriptId\",\"type\":[\"null\",\"string\"]},{\"name\":\"strand\",\"type\":[\"null\",\"string\"]},{\"name\":\"biotype\",\"type\":[\"null\",\"string\"]},{\"name\":\"cDnaPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"cdsPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"codon\",\"type\":[\"null\",\"string\"]},{\"name\":\"functionalDescription\",\"type\":[\"null\",\"string\"]},{\"name\":\"soTerms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ConsequenceTypeEntry\",\"fields\":[{\"name\":\"soName\",\"type\":[\"null\",\"string\"]},{\"name\":\"soAccession\",\"type\":[\"null\",\"string\"]}]}}]}]}}]},{\"name\":\"conservation\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Score\",\"fields\":[{\"name\":\"score\",\"type\":[\"null\",\"double\"]},{\"name\":\"source\",\"type\":[\"null\",\"string\"]},{\"name\":\"description\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"populationFrequencies\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PopulationFrequency\",\"fields\":[{\"name\":\"study\",\"type\":[\"null\",\"string\"]},{\"name\":\"pop\",\"type\":[\"null\",\"string\"]},{\"name\":\"superPop\",\"type\":[\"null\",\"string\"]},{\"name\":\"refAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"altAllele\",\"type\":[\"null\",\"string\"]},{\"name\":\"refAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altAlleleFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"refHomGenotypeFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"hetGenotypeFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altHomGenotypeFreq\",\"type\":[\"null\",\"float\"]}]}}]},{\"name\":\"geneDrugInteraction\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GeneDrugInteraction\",\"fields\":[{\"name\":\"geneName\",\"type\":[\"null\",\"string\"]},{\"name\":\"drugName\",\"type\":[\"null\",\"string\"]},{\"name\":\"source\",\"type\":[\"null\",\"string\"]},{\"name\":\"studyType\",\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"expressionValues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ExpressionValue\",\"fields\":[{\"name\":\"experimentalFactor\",\"type\":[\"null\",\"string\"]},{\"name\":\"factorValue\",\"type\":[\"null\",\"string\"]},{\"name\":\"experimentId\",\"type\":[\"null\",\"string\"]},{\"name\":\"technologyPlatform\",\"type\":[\"null\",\"string\"]},{\"name\":\"expression\",\"type\":{\"type\":\"enum\",\"name\":\"Expression\",\"symbols\":[\"UP\",\"DOWN\"]}},{\"name\":\"pvalue\",\"type\":[\"null\",\"float\"]}]}}]},{\"name\":\"variantTraitAssociation\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"VariantTraitAssociation\",\"fields\":[{\"name\":\"cosmicList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Cosmic\",\"fields\":[{\"name\":\"mutationID\",\"type\":[\"null\",\"string\"]},{\"name\":\"primarySite\",\"type\":[\"null\",\"string\"]},{\"name\":\"primaryHistology\",\"type\":[\"null\",\"string\"]},{\"name\":\"histologySubtype\",\"type\":[\"null\",\"string\"]},{\"name\":\"sampleSource\",\"type\":[\"null\",\"string\"]},{\"name\":\"tumourOrigin\",\"type\":[\"null\",\"string\"]},{\"name\":\"geneName\",\"type\":[\"null\",\"string\"]},{\"name\":\"mutationSomaticStatus\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"gwasList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Gwas\",\"fields\":[{\"name\":\"snpIdCurrent\",\"type\":[\"null\",\"string\"]},{\"name\":\"traits\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"riskAlleleFrequency\",\"type\":[\"null\",\"double\"]},{\"name\":\"reportedGenes\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"clinvarList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Clinvar\",\"fields\":[{\"name\":\"acc\",\"type\":[\"null\",\"string\"]},{\"name\":\"clinicalSignificance\",\"type\":[\"null\",\"string\"]},{\"name\":\"traits\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"geneName\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"reviewStatus\",\"type\":[\"null\",\"string\"]}]}}]}]}}]},{\"name\":\"additionalAttributes\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence chromosome;
   private java.lang.Integer start;
   private java.lang.Integer end;
   private java.lang.CharSequence reference;
   private java.lang.CharSequence alternate;
   private java.lang.CharSequence id;
   private java.util.List<org.opencb.biodata.models.variant.avro.Xref> xrefs;
   private java.util.List<java.lang.CharSequence> hgvs;
   private java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> consequenceTypes;
   private java.util.List<org.opencb.biodata.models.variant.avro.Score> conservation;
   private java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> populationFrequencies;
   private java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> geneDrugInteraction;
   private java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> expressionValues;
   private java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> variantTraitAssociation;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> additionalAttributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantAnnotation() {}

  /**
   * All-args constructor.
   */
  public VariantAnnotation(java.lang.CharSequence chromosome, java.lang.Integer start, java.lang.Integer end, java.lang.CharSequence reference, java.lang.CharSequence alternate, java.lang.CharSequence id, java.util.List<org.opencb.biodata.models.variant.avro.Xref> xrefs, java.util.List<java.lang.CharSequence> hgvs, java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> consequenceTypes, java.util.List<org.opencb.biodata.models.variant.avro.Score> conservation, java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> populationFrequencies, java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> geneDrugInteraction, java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> expressionValues, java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> variantTraitAssociation, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> additionalAttributes) {
    this.chromosome = chromosome;
    this.start = start;
    this.end = end;
    this.reference = reference;
    this.alternate = alternate;
    this.id = id;
    this.xrefs = xrefs;
    this.hgvs = hgvs;
    this.consequenceTypes = consequenceTypes;
    this.conservation = conservation;
    this.populationFrequencies = populationFrequencies;
    this.geneDrugInteraction = geneDrugInteraction;
    this.expressionValues = expressionValues;
    this.variantTraitAssociation = variantTraitAssociation;
    this.additionalAttributes = additionalAttributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chromosome;
    case 1: return start;
    case 2: return end;
    case 3: return reference;
    case 4: return alternate;
    case 5: return id;
    case 6: return xrefs;
    case 7: return hgvs;
    case 8: return consequenceTypes;
    case 9: return conservation;
    case 10: return populationFrequencies;
    case 11: return geneDrugInteraction;
    case 12: return expressionValues;
    case 13: return variantTraitAssociation;
    case 14: return additionalAttributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chromosome = (java.lang.CharSequence)value$; break;
    case 1: start = (java.lang.Integer)value$; break;
    case 2: end = (java.lang.Integer)value$; break;
    case 3: reference = (java.lang.CharSequence)value$; break;
    case 4: alternate = (java.lang.CharSequence)value$; break;
    case 5: id = (java.lang.CharSequence)value$; break;
    case 6: xrefs = (java.util.List<org.opencb.biodata.models.variant.avro.Xref>)value$; break;
    case 7: hgvs = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: consequenceTypes = (java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType>)value$; break;
    case 9: conservation = (java.util.List<org.opencb.biodata.models.variant.avro.Score>)value$; break;
    case 10: populationFrequencies = (java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency>)value$; break;
    case 11: geneDrugInteraction = (java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction>)value$; break;
    case 12: expressionValues = (java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue>)value$; break;
    case 13: variantTraitAssociation = (java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation>)value$; break;
    case 14: additionalAttributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'chromosome' field.
   */
  public java.lang.CharSequence getChromosome() {
    return chromosome;
  }

  /**
   * Sets the value of the 'chromosome' field.
   * @param value the value to set.
   */
  public void setChromosome(java.lang.CharSequence value) {
    this.chromosome = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Integer value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'reference' field.
   */
  public java.lang.CharSequence getReference() {
    return reference;
  }

  /**
   * Sets the value of the 'reference' field.
   * @param value the value to set.
   */
  public void setReference(java.lang.CharSequence value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'alternate' field.
   */
  public java.lang.CharSequence getAlternate() {
    return alternate;
  }

  /**
   * Sets the value of the 'alternate' field.
   * @param value the value to set.
   */
  public void setAlternate(java.lang.CharSequence value) {
    this.alternate = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'xrefs' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Xref> getXrefs() {
    return xrefs;
  }

  /**
   * Sets the value of the 'xrefs' field.
   * @param value the value to set.
   */
  public void setXrefs(java.util.List<org.opencb.biodata.models.variant.avro.Xref> value) {
    this.xrefs = value;
  }

  /**
   * Gets the value of the 'hgvs' field.
   */
  public java.util.List<java.lang.CharSequence> getHgvs() {
    return hgvs;
  }

  /**
   * Sets the value of the 'hgvs' field.
   * @param value the value to set.
   */
  public void setHgvs(java.util.List<java.lang.CharSequence> value) {
    this.hgvs = value;
  }

  /**
   * Gets the value of the 'consequenceTypes' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> getConsequenceTypes() {
    return consequenceTypes;
  }

  /**
   * Sets the value of the 'consequenceTypes' field.
   * @param value the value to set.
   */
  public void setConsequenceTypes(java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> value) {
    this.consequenceTypes = value;
  }

  /**
   * Gets the value of the 'conservation' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Score> getConservation() {
    return conservation;
  }

  /**
   * Sets the value of the 'conservation' field.
   * @param value the value to set.
   */
  public void setConservation(java.util.List<org.opencb.biodata.models.variant.avro.Score> value) {
    this.conservation = value;
  }

  /**
   * Gets the value of the 'populationFrequencies' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> getPopulationFrequencies() {
    return populationFrequencies;
  }

  /**
   * Sets the value of the 'populationFrequencies' field.
   * @param value the value to set.
   */
  public void setPopulationFrequencies(java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> value) {
    this.populationFrequencies = value;
  }

  /**
   * Gets the value of the 'geneDrugInteraction' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> getGeneDrugInteraction() {
    return geneDrugInteraction;
  }

  /**
   * Sets the value of the 'geneDrugInteraction' field.
   * @param value the value to set.
   */
  public void setGeneDrugInteraction(java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> value) {
    this.geneDrugInteraction = value;
  }

  /**
   * Gets the value of the 'expressionValues' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> getExpressionValues() {
    return expressionValues;
  }

  /**
   * Sets the value of the 'expressionValues' field.
   * @param value the value to set.
   */
  public void setExpressionValues(java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> value) {
    this.expressionValues = value;
  }

  /**
   * Gets the value of the 'variantTraitAssociation' field.
   */
  public java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> getVariantTraitAssociation() {
    return variantTraitAssociation;
  }

  /**
   * Sets the value of the 'variantTraitAssociation' field.
   * @param value the value to set.
   */
  public void setVariantTraitAssociation(java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> value) {
    this.variantTraitAssociation = value;
  }

  /**
   * Gets the value of the 'additionalAttributes' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAdditionalAttributes() {
    return additionalAttributes;
  }

  /**
   * Sets the value of the 'additionalAttributes' field.
   * @param value the value to set.
   */
  public void setAdditionalAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.additionalAttributes = value;
  }

  /** Creates a new VariantAnnotation RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder();
  }
  
  /** Creates a new VariantAnnotation RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder newBuilder(org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder other) {
    return new org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder(other);
  }
  
  /** Creates a new VariantAnnotation RecordBuilder by copying an existing VariantAnnotation instance */
  public static org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder newBuilder(org.opencb.biodata.models.variant.avro.VariantAnnotation other) {
    return new org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantAnnotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantAnnotation>
    implements org.apache.avro.data.RecordBuilder<VariantAnnotation> {

    private java.lang.CharSequence chromosome;
    private java.lang.Integer start;
    private java.lang.Integer end;
    private java.lang.CharSequence reference;
    private java.lang.CharSequence alternate;
    private java.lang.CharSequence id;
    private java.util.List<org.opencb.biodata.models.variant.avro.Xref> xrefs;
    private java.util.List<java.lang.CharSequence> hgvs;
    private java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> consequenceTypes;
    private java.util.List<org.opencb.biodata.models.variant.avro.Score> conservation;
    private java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> populationFrequencies;
    private java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> geneDrugInteraction;
    private java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> expressionValues;
    private java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> variantTraitAssociation;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> additionalAttributes;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.VariantAnnotation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[0].schema(), other.chromosome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.end)) {
        this.end = data().deepCopy(fields()[2].schema(), other.end);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reference)) {
        this.reference = data().deepCopy(fields()[3].schema(), other.reference);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alternate)) {
        this.alternate = data().deepCopy(fields()[4].schema(), other.alternate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.xrefs)) {
        this.xrefs = data().deepCopy(fields()[6].schema(), other.xrefs);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hgvs)) {
        this.hgvs = data().deepCopy(fields()[7].schema(), other.hgvs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.consequenceTypes)) {
        this.consequenceTypes = data().deepCopy(fields()[8].schema(), other.consequenceTypes);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.conservation)) {
        this.conservation = data().deepCopy(fields()[9].schema(), other.conservation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.populationFrequencies)) {
        this.populationFrequencies = data().deepCopy(fields()[10].schema(), other.populationFrequencies);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.geneDrugInteraction)) {
        this.geneDrugInteraction = data().deepCopy(fields()[11].schema(), other.geneDrugInteraction);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.expressionValues)) {
        this.expressionValues = data().deepCopy(fields()[12].schema(), other.expressionValues);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.variantTraitAssociation)) {
        this.variantTraitAssociation = data().deepCopy(fields()[13].schema(), other.variantTraitAssociation);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.additionalAttributes)) {
        this.additionalAttributes = data().deepCopy(fields()[14].schema(), other.additionalAttributes);
        fieldSetFlags()[14] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantAnnotation instance */
    private Builder(org.opencb.biodata.models.variant.avro.VariantAnnotation other) {
            super(org.opencb.biodata.models.variant.avro.VariantAnnotation.SCHEMA$);
      if (isValidValue(fields()[0], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[0].schema(), other.chromosome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.start)) {
        this.start = data().deepCopy(fields()[1].schema(), other.start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.end)) {
        this.end = data().deepCopy(fields()[2].schema(), other.end);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reference)) {
        this.reference = data().deepCopy(fields()[3].schema(), other.reference);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.alternate)) {
        this.alternate = data().deepCopy(fields()[4].schema(), other.alternate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.xrefs)) {
        this.xrefs = data().deepCopy(fields()[6].schema(), other.xrefs);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hgvs)) {
        this.hgvs = data().deepCopy(fields()[7].schema(), other.hgvs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.consequenceTypes)) {
        this.consequenceTypes = data().deepCopy(fields()[8].schema(), other.consequenceTypes);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.conservation)) {
        this.conservation = data().deepCopy(fields()[9].schema(), other.conservation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.populationFrequencies)) {
        this.populationFrequencies = data().deepCopy(fields()[10].schema(), other.populationFrequencies);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.geneDrugInteraction)) {
        this.geneDrugInteraction = data().deepCopy(fields()[11].schema(), other.geneDrugInteraction);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.expressionValues)) {
        this.expressionValues = data().deepCopy(fields()[12].schema(), other.expressionValues);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.variantTraitAssociation)) {
        this.variantTraitAssociation = data().deepCopy(fields()[13].schema(), other.variantTraitAssociation);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.additionalAttributes)) {
        this.additionalAttributes = data().deepCopy(fields()[14].schema(), other.additionalAttributes);
        fieldSetFlags()[14] = true;
      }
    }

    /** Gets the value of the 'chromosome' field */
    public java.lang.CharSequence getChromosome() {
      return chromosome;
    }
    
    /** Sets the value of the 'chromosome' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setChromosome(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.chromosome = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'chromosome' field has been set */
    public boolean hasChromosome() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'chromosome' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearChromosome() {
      chromosome = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Integer getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setStart(java.lang.Integer value) {
      validate(fields()[1], value);
      this.start = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'start' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearStart() {
      start = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Integer getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setEnd(java.lang.Integer value) {
      validate(fields()[2], value);
      this.end = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'end' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearEnd() {
      end = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'reference' field */
    public java.lang.CharSequence getReference() {
      return reference;
    }
    
    /** Sets the value of the 'reference' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setReference(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.reference = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'reference' field has been set */
    public boolean hasReference() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'reference' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearReference() {
      reference = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'alternate' field */
    public java.lang.CharSequence getAlternate() {
      return alternate;
    }
    
    /** Sets the value of the 'alternate' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setAlternate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.alternate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'alternate' field has been set */
    public boolean hasAlternate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'alternate' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearAlternate() {
      alternate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.id = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'id' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearId() {
      id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'xrefs' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Xref> getXrefs() {
      return xrefs;
    }
    
    /** Sets the value of the 'xrefs' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setXrefs(java.util.List<org.opencb.biodata.models.variant.avro.Xref> value) {
      validate(fields()[6], value);
      this.xrefs = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'xrefs' field has been set */
    public boolean hasXrefs() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'xrefs' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearXrefs() {
      xrefs = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'hgvs' field */
    public java.util.List<java.lang.CharSequence> getHgvs() {
      return hgvs;
    }
    
    /** Sets the value of the 'hgvs' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setHgvs(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.hgvs = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'hgvs' field has been set */
    public boolean hasHgvs() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'hgvs' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearHgvs() {
      hgvs = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'consequenceTypes' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> getConsequenceTypes() {
      return consequenceTypes;
    }
    
    /** Sets the value of the 'consequenceTypes' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setConsequenceTypes(java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType> value) {
      validate(fields()[8], value);
      this.consequenceTypes = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'consequenceTypes' field has been set */
    public boolean hasConsequenceTypes() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'consequenceTypes' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearConsequenceTypes() {
      consequenceTypes = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'conservation' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Score> getConservation() {
      return conservation;
    }
    
    /** Sets the value of the 'conservation' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setConservation(java.util.List<org.opencb.biodata.models.variant.avro.Score> value) {
      validate(fields()[9], value);
      this.conservation = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'conservation' field has been set */
    public boolean hasConservation() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'conservation' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearConservation() {
      conservation = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'populationFrequencies' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> getPopulationFrequencies() {
      return populationFrequencies;
    }
    
    /** Sets the value of the 'populationFrequencies' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setPopulationFrequencies(java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency> value) {
      validate(fields()[10], value);
      this.populationFrequencies = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'populationFrequencies' field has been set */
    public boolean hasPopulationFrequencies() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'populationFrequencies' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearPopulationFrequencies() {
      populationFrequencies = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'geneDrugInteraction' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> getGeneDrugInteraction() {
      return geneDrugInteraction;
    }
    
    /** Sets the value of the 'geneDrugInteraction' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setGeneDrugInteraction(java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction> value) {
      validate(fields()[11], value);
      this.geneDrugInteraction = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'geneDrugInteraction' field has been set */
    public boolean hasGeneDrugInteraction() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'geneDrugInteraction' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearGeneDrugInteraction() {
      geneDrugInteraction = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'expressionValues' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> getExpressionValues() {
      return expressionValues;
    }
    
    /** Sets the value of the 'expressionValues' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setExpressionValues(java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue> value) {
      validate(fields()[12], value);
      this.expressionValues = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'expressionValues' field has been set */
    public boolean hasExpressionValues() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'expressionValues' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearExpressionValues() {
      expressionValues = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'variantTraitAssociation' field */
    public java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> getVariantTraitAssociation() {
      return variantTraitAssociation;
    }
    
    /** Sets the value of the 'variantTraitAssociation' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setVariantTraitAssociation(java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation> value) {
      validate(fields()[13], value);
      this.variantTraitAssociation = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'variantTraitAssociation' field has been set */
    public boolean hasVariantTraitAssociation() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'variantTraitAssociation' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearVariantTraitAssociation() {
      variantTraitAssociation = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'additionalAttributes' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAdditionalAttributes() {
      return additionalAttributes;
    }
    
    /** Sets the value of the 'additionalAttributes' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder setAdditionalAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[14], value);
      this.additionalAttributes = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'additionalAttributes' field has been set */
    public boolean hasAdditionalAttributes() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'additionalAttributes' field */
    public org.opencb.biodata.models.variant.avro.VariantAnnotation.Builder clearAdditionalAttributes() {
      additionalAttributes = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    public VariantAnnotation build() {
      try {
        VariantAnnotation record = new VariantAnnotation();
        record.chromosome = fieldSetFlags()[0] ? this.chromosome : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.start = fieldSetFlags()[1] ? this.start : (java.lang.Integer) defaultValue(fields()[1]);
        record.end = fieldSetFlags()[2] ? this.end : (java.lang.Integer) defaultValue(fields()[2]);
        record.reference = fieldSetFlags()[3] ? this.reference : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.alternate = fieldSetFlags()[4] ? this.alternate : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.id = fieldSetFlags()[5] ? this.id : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.xrefs = fieldSetFlags()[6] ? this.xrefs : (java.util.List<org.opencb.biodata.models.variant.avro.Xref>) defaultValue(fields()[6]);
        record.hgvs = fieldSetFlags()[7] ? this.hgvs : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.consequenceTypes = fieldSetFlags()[8] ? this.consequenceTypes : (java.util.List<org.opencb.biodata.models.variant.avro.ConsequenceType>) defaultValue(fields()[8]);
        record.conservation = fieldSetFlags()[9] ? this.conservation : (java.util.List<org.opencb.biodata.models.variant.avro.Score>) defaultValue(fields()[9]);
        record.populationFrequencies = fieldSetFlags()[10] ? this.populationFrequencies : (java.util.List<org.opencb.biodata.models.variant.avro.PopulationFrequency>) defaultValue(fields()[10]);
        record.geneDrugInteraction = fieldSetFlags()[11] ? this.geneDrugInteraction : (java.util.List<org.opencb.biodata.models.variant.avro.GeneDrugInteraction>) defaultValue(fields()[11]);
        record.expressionValues = fieldSetFlags()[12] ? this.expressionValues : (java.util.List<org.opencb.biodata.models.variant.avro.ExpressionValue>) defaultValue(fields()[12]);
        record.variantTraitAssociation = fieldSetFlags()[13] ? this.variantTraitAssociation : (java.util.Map<java.lang.CharSequence,org.opencb.biodata.models.variant.avro.VariantTraitAssociation>) defaultValue(fields()[13]);
        record.additionalAttributes = fieldSetFlags()[14] ? this.additionalAttributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
