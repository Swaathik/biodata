/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantTraitAssociation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantTraitAssociation\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"cosmicList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Cosmic\",\"fields\":[{\"name\":\"mutationID\",\"type\":[\"null\",\"string\"]},{\"name\":\"primarySite\",\"type\":[\"null\",\"string\"]},{\"name\":\"primaryHistology\",\"type\":[\"null\",\"string\"]},{\"name\":\"histologySubtype\",\"type\":[\"null\",\"string\"]},{\"name\":\"sampleSource\",\"type\":[\"null\",\"string\"]},{\"name\":\"tumourOrigin\",\"type\":[\"null\",\"string\"]},{\"name\":\"geneName\",\"type\":[\"null\",\"string\"]},{\"name\":\"mutationSomaticStatus\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"gwasList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Gwas\",\"fields\":[{\"name\":\"snpIdCurrent\",\"type\":[\"null\",\"string\"]},{\"name\":\"traits\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"riskAlleleFrequency\",\"type\":[\"null\",\"double\"]},{\"name\":\"reportedGenes\",\"type\":[\"null\",\"string\"]}]}}]},{\"name\":\"clinvarList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Clinvar\",\"fields\":[{\"name\":\"acc\",\"type\":[\"null\",\"string\"]},{\"name\":\"clinicalSignificance\",\"type\":[\"null\",\"string\"]},{\"name\":\"traits\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"geneName\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"reviewStatus\",\"type\":[\"null\",\"string\"]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> cosmicList;
   private java.util.List<org.opencb.biodata.models.variant.avro.Gwas> gwasList;
   private java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> clinvarList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantTraitAssociation() {}

  /**
   * All-args constructor.
   */
  public VariantTraitAssociation(java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> cosmicList, java.util.List<org.opencb.biodata.models.variant.avro.Gwas> gwasList, java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> clinvarList) {
    this.cosmicList = cosmicList;
    this.gwasList = gwasList;
    this.clinvarList = clinvarList;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cosmicList;
    case 1: return gwasList;
    case 2: return clinvarList;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cosmicList = (java.util.List<org.opencb.biodata.models.variant.avro.Cosmic>)value$; break;
    case 1: gwasList = (java.util.List<org.opencb.biodata.models.variant.avro.Gwas>)value$; break;
    case 2: clinvarList = (java.util.List<org.opencb.biodata.models.variant.avro.Clinvar>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cosmicList' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> getCosmicList() {
    return cosmicList;
  }

  /**
   * Sets the value of the 'cosmicList' field.
   * @param value the value to set.
   */
  public void setCosmicList(java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> value) {
    this.cosmicList = value;
  }

  /**
   * Gets the value of the 'gwasList' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Gwas> getGwasList() {
    return gwasList;
  }

  /**
   * Sets the value of the 'gwasList' field.
   * @param value the value to set.
   */
  public void setGwasList(java.util.List<org.opencb.biodata.models.variant.avro.Gwas> value) {
    this.gwasList = value;
  }

  /**
   * Gets the value of the 'clinvarList' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> getClinvarList() {
    return clinvarList;
  }

  /**
   * Sets the value of the 'clinvarList' field.
   * @param value the value to set.
   */
  public void setClinvarList(java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> value) {
    this.clinvarList = value;
  }

  /** Creates a new VariantTraitAssociation RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder();
  }
  
  /** Creates a new VariantTraitAssociation RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder newBuilder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder other) {
    return new org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder(other);
  }
  
  /** Creates a new VariantTraitAssociation RecordBuilder by copying an existing VariantTraitAssociation instance */
  public static org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder newBuilder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation other) {
    return new org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantTraitAssociation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantTraitAssociation>
    implements org.apache.avro.data.RecordBuilder<VariantTraitAssociation> {

    private java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> cosmicList;
    private java.util.List<org.opencb.biodata.models.variant.avro.Gwas> gwasList;
    private java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> clinvarList;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cosmicList)) {
        this.cosmicList = data().deepCopy(fields()[0].schema(), other.cosmicList);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gwasList)) {
        this.gwasList = data().deepCopy(fields()[1].schema(), other.gwasList);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.clinvarList)) {
        this.clinvarList = data().deepCopy(fields()[2].schema(), other.clinvarList);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantTraitAssociation instance */
    private Builder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation other) {
            super(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.SCHEMA$);
      if (isValidValue(fields()[0], other.cosmicList)) {
        this.cosmicList = data().deepCopy(fields()[0].schema(), other.cosmicList);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gwasList)) {
        this.gwasList = data().deepCopy(fields()[1].schema(), other.gwasList);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.clinvarList)) {
        this.clinvarList = data().deepCopy(fields()[2].schema(), other.clinvarList);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'cosmicList' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> getCosmicList() {
      return cosmicList;
    }
    
    /** Sets the value of the 'cosmicList' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder setCosmicList(java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> value) {
      validate(fields()[0], value);
      this.cosmicList = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'cosmicList' field has been set */
    public boolean hasCosmicList() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'cosmicList' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder clearCosmicList() {
      cosmicList = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'gwasList' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Gwas> getGwasList() {
      return gwasList;
    }
    
    /** Sets the value of the 'gwasList' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder setGwasList(java.util.List<org.opencb.biodata.models.variant.avro.Gwas> value) {
      validate(fields()[1], value);
      this.gwasList = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'gwasList' field has been set */
    public boolean hasGwasList() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'gwasList' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder clearGwasList() {
      gwasList = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'clinvarList' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> getClinvarList() {
      return clinvarList;
    }
    
    /** Sets the value of the 'clinvarList' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder setClinvarList(java.util.List<org.opencb.biodata.models.variant.avro.Clinvar> value) {
      validate(fields()[2], value);
      this.clinvarList = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'clinvarList' field has been set */
    public boolean hasClinvarList() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'clinvarList' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder clearClinvarList() {
      clinvarList = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public VariantTraitAssociation build() {
      try {
        VariantTraitAssociation record = new VariantTraitAssociation();
        record.cosmicList = fieldSetFlags()[0] ? this.cosmicList : (java.util.List<org.opencb.biodata.models.variant.avro.Cosmic>) defaultValue(fields()[0]);
        record.gwasList = fieldSetFlags()[1] ? this.gwasList : (java.util.List<org.opencb.biodata.models.variant.avro.Gwas>) defaultValue(fields()[1]);
        record.clinvarList = fieldSetFlags()[2] ? this.clinvarList : (java.util.List<org.opencb.biodata.models.variant.avro.Clinvar>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
