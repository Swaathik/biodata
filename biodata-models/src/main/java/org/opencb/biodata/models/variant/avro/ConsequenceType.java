/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ConsequenceType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConsequenceType\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"geneName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"ensemblGeneId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"ensemblTranscriptId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"strand\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"biotype\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"transcriptAnnotationFlags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"cdnaPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"cdsPosition\",\"type\":[\"null\",\"int\"]},{\"name\":\"codon\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"proteinVariantAnnotation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ProteinVariantAnnotation\",\"fields\":[{\"name\":\"uniprotAccession\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"uniprotName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"position\",\"type\":\"int\"},{\"name\":\"reference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"alternate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"uniprotVariantId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"functionalDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"substitutionScores\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Score\",\"fields\":[{\"name\":\"score\",\"type\":\"double\"},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]},{\"name\":\"keywords\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ProteinFeature\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}}]}]}]},{\"name\":\"sequenceOntologyTerms\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SequenceOntologyTerm\",\"fields\":[{\"name\":\"accession\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String geneName;
   private java.lang.String ensemblGeneId;
   private java.lang.String ensemblTranscriptId;
   private java.lang.String strand;
   private java.lang.String biotype;
   private java.util.List<java.lang.String> transcriptAnnotationFlags;
   private java.lang.Integer cdnaPosition;
   private java.lang.Integer cdsPosition;
   private java.lang.String codon;
   private org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation proteinVariantAnnotation;
   private java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> sequenceOntologyTerms;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ConsequenceType() {}

  /**
   * All-args constructor.
   */
  public ConsequenceType(java.lang.String geneName, java.lang.String ensemblGeneId, java.lang.String ensemblTranscriptId, java.lang.String strand, java.lang.String biotype, java.util.List<java.lang.String> transcriptAnnotationFlags, java.lang.Integer cdnaPosition, java.lang.Integer cdsPosition, java.lang.String codon, org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation proteinVariantAnnotation, java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> sequenceOntologyTerms) {
    this.geneName = geneName;
    this.ensemblGeneId = ensemblGeneId;
    this.ensemblTranscriptId = ensemblTranscriptId;
    this.strand = strand;
    this.biotype = biotype;
    this.transcriptAnnotationFlags = transcriptAnnotationFlags;
    this.cdnaPosition = cdnaPosition;
    this.cdsPosition = cdsPosition;
    this.codon = codon;
    this.proteinVariantAnnotation = proteinVariantAnnotation;
    this.sequenceOntologyTerms = sequenceOntologyTerms;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return geneName;
    case 1: return ensemblGeneId;
    case 2: return ensemblTranscriptId;
    case 3: return strand;
    case 4: return biotype;
    case 5: return transcriptAnnotationFlags;
    case 6: return cdnaPosition;
    case 7: return cdsPosition;
    case 8: return codon;
    case 9: return proteinVariantAnnotation;
    case 10: return sequenceOntologyTerms;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: geneName = (java.lang.String)value$; break;
    case 1: ensemblGeneId = (java.lang.String)value$; break;
    case 2: ensemblTranscriptId = (java.lang.String)value$; break;
    case 3: strand = (java.lang.String)value$; break;
    case 4: biotype = (java.lang.String)value$; break;
    case 5: transcriptAnnotationFlags = (java.util.List<java.lang.String>)value$; break;
    case 6: cdnaPosition = (java.lang.Integer)value$; break;
    case 7: cdsPosition = (java.lang.Integer)value$; break;
    case 8: codon = (java.lang.String)value$; break;
    case 9: proteinVariantAnnotation = (org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation)value$; break;
    case 10: sequenceOntologyTerms = (java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'geneName' field.
   */
  public java.lang.String getGeneName() {
    return geneName;
  }

  /**
   * Sets the value of the 'geneName' field.
   * @param value the value to set.
   */
  public void setGeneName(java.lang.String value) {
    this.geneName = value;
  }

  /**
   * Gets the value of the 'ensemblGeneId' field.
   */
  public java.lang.String getEnsemblGeneId() {
    return ensemblGeneId;
  }

  /**
   * Sets the value of the 'ensemblGeneId' field.
   * @param value the value to set.
   */
  public void setEnsemblGeneId(java.lang.String value) {
    this.ensemblGeneId = value;
  }

  /**
   * Gets the value of the 'ensemblTranscriptId' field.
   */
  public java.lang.String getEnsemblTranscriptId() {
    return ensemblTranscriptId;
  }

  /**
   * Sets the value of the 'ensemblTranscriptId' field.
   * @param value the value to set.
   */
  public void setEnsemblTranscriptId(java.lang.String value) {
    this.ensemblTranscriptId = value;
  }

  /**
   * Gets the value of the 'strand' field.
   */
  public java.lang.String getStrand() {
    return strand;
  }

  /**
   * Sets the value of the 'strand' field.
   * @param value the value to set.
   */
  public void setStrand(java.lang.String value) {
    this.strand = value;
  }

  /**
   * Gets the value of the 'biotype' field.
   */
  public java.lang.String getBiotype() {
    return biotype;
  }

  /**
   * Sets the value of the 'biotype' field.
   * @param value the value to set.
   */
  public void setBiotype(java.lang.String value) {
    this.biotype = value;
  }

  /**
   * Gets the value of the 'transcriptAnnotationFlags' field.
   */
  public java.util.List<java.lang.String> getTranscriptAnnotationFlags() {
    return transcriptAnnotationFlags;
  }

  /**
   * Sets the value of the 'transcriptAnnotationFlags' field.
   * @param value the value to set.
   */
  public void setTranscriptAnnotationFlags(java.util.List<java.lang.String> value) {
    this.transcriptAnnotationFlags = value;
  }

  /**
   * Gets the value of the 'cdnaPosition' field.
   */
  public java.lang.Integer getCdnaPosition() {
    return cdnaPosition;
  }

  /**
   * Sets the value of the 'cdnaPosition' field.
   * @param value the value to set.
   */
  public void setCdnaPosition(java.lang.Integer value) {
    this.cdnaPosition = value;
  }

  /**
   * Gets the value of the 'cdsPosition' field.
   */
  public java.lang.Integer getCdsPosition() {
    return cdsPosition;
  }

  /**
   * Sets the value of the 'cdsPosition' field.
   * @param value the value to set.
   */
  public void setCdsPosition(java.lang.Integer value) {
    this.cdsPosition = value;
  }

  /**
   * Gets the value of the 'codon' field.
   */
  public java.lang.String getCodon() {
    return codon;
  }

  /**
   * Sets the value of the 'codon' field.
   * @param value the value to set.
   */
  public void setCodon(java.lang.String value) {
    this.codon = value;
  }

  /**
   * Gets the value of the 'proteinVariantAnnotation' field.
   */
  public org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation getProteinVariantAnnotation() {
    return proteinVariantAnnotation;
  }

  /**
   * Sets the value of the 'proteinVariantAnnotation' field.
   * @param value the value to set.
   */
  public void setProteinVariantAnnotation(org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation value) {
    this.proteinVariantAnnotation = value;
  }

  /**
   * Gets the value of the 'sequenceOntologyTerms' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> getSequenceOntologyTerms() {
    return sequenceOntologyTerms;
  }

  /**
   * Sets the value of the 'sequenceOntologyTerms' field.
   * @param value the value to set.
   */
  public void setSequenceOntologyTerms(java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> value) {
    this.sequenceOntologyTerms = value;
  }

  /** Creates a new ConsequenceType RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.ConsequenceType.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.ConsequenceType.Builder();
  }
  
  /** Creates a new ConsequenceType RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.ConsequenceType.Builder newBuilder(org.opencb.biodata.models.variant.avro.ConsequenceType.Builder other) {
    return new org.opencb.biodata.models.variant.avro.ConsequenceType.Builder(other);
  }
  
  /** Creates a new ConsequenceType RecordBuilder by copying an existing ConsequenceType instance */
  public static org.opencb.biodata.models.variant.avro.ConsequenceType.Builder newBuilder(org.opencb.biodata.models.variant.avro.ConsequenceType other) {
    return new org.opencb.biodata.models.variant.avro.ConsequenceType.Builder(other);
  }
  
  /**
   * RecordBuilder for ConsequenceType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConsequenceType>
    implements org.apache.avro.data.RecordBuilder<ConsequenceType> {

    private java.lang.String geneName;
    private java.lang.String ensemblGeneId;
    private java.lang.String ensemblTranscriptId;
    private java.lang.String strand;
    private java.lang.String biotype;
    private java.util.List<java.lang.String> transcriptAnnotationFlags;
    private java.lang.Integer cdnaPosition;
    private java.lang.Integer cdsPosition;
    private java.lang.String codon;
    private org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation proteinVariantAnnotation;
    private java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> sequenceOntologyTerms;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.ConsequenceType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.ConsequenceType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.geneName)) {
        this.geneName = data().deepCopy(fields()[0].schema(), other.geneName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ensemblGeneId)) {
        this.ensemblGeneId = data().deepCopy(fields()[1].schema(), other.ensemblGeneId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ensemblTranscriptId)) {
        this.ensemblTranscriptId = data().deepCopy(fields()[2].schema(), other.ensemblTranscriptId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strand)) {
        this.strand = data().deepCopy(fields()[3].schema(), other.strand);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.biotype)) {
        this.biotype = data().deepCopy(fields()[4].schema(), other.biotype);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transcriptAnnotationFlags)) {
        this.transcriptAnnotationFlags = data().deepCopy(fields()[5].schema(), other.transcriptAnnotationFlags);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cdnaPosition)) {
        this.cdnaPosition = data().deepCopy(fields()[6].schema(), other.cdnaPosition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cdsPosition)) {
        this.cdsPosition = data().deepCopy(fields()[7].schema(), other.cdsPosition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.codon)) {
        this.codon = data().deepCopy(fields()[8].schema(), other.codon);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.proteinVariantAnnotation)) {
        this.proteinVariantAnnotation = data().deepCopy(fields()[9].schema(), other.proteinVariantAnnotation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sequenceOntologyTerms)) {
        this.sequenceOntologyTerms = data().deepCopy(fields()[10].schema(), other.sequenceOntologyTerms);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ConsequenceType instance */
    private Builder(org.opencb.biodata.models.variant.avro.ConsequenceType other) {
            super(org.opencb.biodata.models.variant.avro.ConsequenceType.SCHEMA$);
      if (isValidValue(fields()[0], other.geneName)) {
        this.geneName = data().deepCopy(fields()[0].schema(), other.geneName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ensemblGeneId)) {
        this.ensemblGeneId = data().deepCopy(fields()[1].schema(), other.ensemblGeneId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ensemblTranscriptId)) {
        this.ensemblTranscriptId = data().deepCopy(fields()[2].schema(), other.ensemblTranscriptId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strand)) {
        this.strand = data().deepCopy(fields()[3].schema(), other.strand);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.biotype)) {
        this.biotype = data().deepCopy(fields()[4].schema(), other.biotype);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transcriptAnnotationFlags)) {
        this.transcriptAnnotationFlags = data().deepCopy(fields()[5].schema(), other.transcriptAnnotationFlags);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cdnaPosition)) {
        this.cdnaPosition = data().deepCopy(fields()[6].schema(), other.cdnaPosition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cdsPosition)) {
        this.cdsPosition = data().deepCopy(fields()[7].schema(), other.cdsPosition);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.codon)) {
        this.codon = data().deepCopy(fields()[8].schema(), other.codon);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.proteinVariantAnnotation)) {
        this.proteinVariantAnnotation = data().deepCopy(fields()[9].schema(), other.proteinVariantAnnotation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sequenceOntologyTerms)) {
        this.sequenceOntologyTerms = data().deepCopy(fields()[10].schema(), other.sequenceOntologyTerms);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'geneName' field */
    public java.lang.String getGeneName() {
      return geneName;
    }
    
    /** Sets the value of the 'geneName' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setGeneName(java.lang.String value) {
      validate(fields()[0], value);
      this.geneName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'geneName' field has been set */
    public boolean hasGeneName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'geneName' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearGeneName() {
      geneName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ensemblGeneId' field */
    public java.lang.String getEnsemblGeneId() {
      return ensemblGeneId;
    }
    
    /** Sets the value of the 'ensemblGeneId' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setEnsemblGeneId(java.lang.String value) {
      validate(fields()[1], value);
      this.ensemblGeneId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ensemblGeneId' field has been set */
    public boolean hasEnsemblGeneId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ensemblGeneId' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearEnsemblGeneId() {
      ensemblGeneId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ensemblTranscriptId' field */
    public java.lang.String getEnsemblTranscriptId() {
      return ensemblTranscriptId;
    }
    
    /** Sets the value of the 'ensemblTranscriptId' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setEnsemblTranscriptId(java.lang.String value) {
      validate(fields()[2], value);
      this.ensemblTranscriptId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ensemblTranscriptId' field has been set */
    public boolean hasEnsemblTranscriptId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ensemblTranscriptId' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearEnsemblTranscriptId() {
      ensemblTranscriptId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'strand' field */
    public java.lang.String getStrand() {
      return strand;
    }
    
    /** Sets the value of the 'strand' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setStrand(java.lang.String value) {
      validate(fields()[3], value);
      this.strand = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'strand' field has been set */
    public boolean hasStrand() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'strand' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearStrand() {
      strand = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'biotype' field */
    public java.lang.String getBiotype() {
      return biotype;
    }
    
    /** Sets the value of the 'biotype' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setBiotype(java.lang.String value) {
      validate(fields()[4], value);
      this.biotype = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'biotype' field has been set */
    public boolean hasBiotype() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'biotype' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearBiotype() {
      biotype = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'transcriptAnnotationFlags' field */
    public java.util.List<java.lang.String> getTranscriptAnnotationFlags() {
      return transcriptAnnotationFlags;
    }
    
    /** Sets the value of the 'transcriptAnnotationFlags' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setTranscriptAnnotationFlags(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.transcriptAnnotationFlags = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'transcriptAnnotationFlags' field has been set */
    public boolean hasTranscriptAnnotationFlags() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'transcriptAnnotationFlags' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearTranscriptAnnotationFlags() {
      transcriptAnnotationFlags = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'cdnaPosition' field */
    public java.lang.Integer getCdnaPosition() {
      return cdnaPosition;
    }
    
    /** Sets the value of the 'cdnaPosition' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setCdnaPosition(java.lang.Integer value) {
      validate(fields()[6], value);
      this.cdnaPosition = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'cdnaPosition' field has been set */
    public boolean hasCdnaPosition() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'cdnaPosition' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearCdnaPosition() {
      cdnaPosition = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'cdsPosition' field */
    public java.lang.Integer getCdsPosition() {
      return cdsPosition;
    }
    
    /** Sets the value of the 'cdsPosition' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setCdsPosition(java.lang.Integer value) {
      validate(fields()[7], value);
      this.cdsPosition = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'cdsPosition' field has been set */
    public boolean hasCdsPosition() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'cdsPosition' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearCdsPosition() {
      cdsPosition = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'codon' field */
    public java.lang.String getCodon() {
      return codon;
    }
    
    /** Sets the value of the 'codon' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setCodon(java.lang.String value) {
      validate(fields()[8], value);
      this.codon = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'codon' field has been set */
    public boolean hasCodon() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'codon' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearCodon() {
      codon = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'proteinVariantAnnotation' field */
    public org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation getProteinVariantAnnotation() {
      return proteinVariantAnnotation;
    }
    
    /** Sets the value of the 'proteinVariantAnnotation' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setProteinVariantAnnotation(org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation value) {
      validate(fields()[9], value);
      this.proteinVariantAnnotation = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'proteinVariantAnnotation' field has been set */
    public boolean hasProteinVariantAnnotation() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'proteinVariantAnnotation' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearProteinVariantAnnotation() {
      proteinVariantAnnotation = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'sequenceOntologyTerms' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> getSequenceOntologyTerms() {
      return sequenceOntologyTerms;
    }
    
    /** Sets the value of the 'sequenceOntologyTerms' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder setSequenceOntologyTerms(java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm> value) {
      validate(fields()[10], value);
      this.sequenceOntologyTerms = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'sequenceOntologyTerms' field has been set */
    public boolean hasSequenceOntologyTerms() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'sequenceOntologyTerms' field */
    public org.opencb.biodata.models.variant.avro.ConsequenceType.Builder clearSequenceOntologyTerms() {
      sequenceOntologyTerms = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public ConsequenceType build() {
      try {
        ConsequenceType record = new ConsequenceType();
        record.geneName = fieldSetFlags()[0] ? this.geneName : (java.lang.String) defaultValue(fields()[0]);
        record.ensemblGeneId = fieldSetFlags()[1] ? this.ensemblGeneId : (java.lang.String) defaultValue(fields()[1]);
        record.ensemblTranscriptId = fieldSetFlags()[2] ? this.ensemblTranscriptId : (java.lang.String) defaultValue(fields()[2]);
        record.strand = fieldSetFlags()[3] ? this.strand : (java.lang.String) defaultValue(fields()[3]);
        record.biotype = fieldSetFlags()[4] ? this.biotype : (java.lang.String) defaultValue(fields()[4]);
        record.transcriptAnnotationFlags = fieldSetFlags()[5] ? this.transcriptAnnotationFlags : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        record.cdnaPosition = fieldSetFlags()[6] ? this.cdnaPosition : (java.lang.Integer) defaultValue(fields()[6]);
        record.cdsPosition = fieldSetFlags()[7] ? this.cdsPosition : (java.lang.Integer) defaultValue(fields()[7]);
        record.codon = fieldSetFlags()[8] ? this.codon : (java.lang.String) defaultValue(fields()[8]);
        record.proteinVariantAnnotation = fieldSetFlags()[9] ? this.proteinVariantAnnotation : (org.opencb.biodata.models.variant.avro.ProteinVariantAnnotation) defaultValue(fields()[9]);
        record.sequenceOntologyTerms = fieldSetFlags()[10] ? this.sequenceOntologyTerms : (java.util.List<org.opencb.biodata.models.variant.avro.SequenceOntologyTerm>) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
