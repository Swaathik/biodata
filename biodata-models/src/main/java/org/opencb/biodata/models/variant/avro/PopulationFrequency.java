/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PopulationFrequency extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PopulationFrequency\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"study\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"population\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"refAllele\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"altAllele\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"refAlleleFreq\",\"type\":\"float\"},{\"name\":\"altAlleleFreq\",\"type\":\"float\"},{\"name\":\"refHomGenotypeFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"hetGenotypeFreq\",\"type\":[\"null\",\"float\"]},{\"name\":\"altHomGenotypeFreq\",\"type\":[\"null\",\"float\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String study;
   private java.lang.String population;
   private java.lang.String refAllele;
   private java.lang.String altAllele;
   private float refAlleleFreq;
   private float altAlleleFreq;
   private java.lang.Float refHomGenotypeFreq;
   private java.lang.Float hetGenotypeFreq;
   private java.lang.Float altHomGenotypeFreq;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PopulationFrequency() {}

  /**
   * All-args constructor.
   */
  public PopulationFrequency(java.lang.String study, java.lang.String population, java.lang.String refAllele, java.lang.String altAllele, java.lang.Float refAlleleFreq, java.lang.Float altAlleleFreq, java.lang.Float refHomGenotypeFreq, java.lang.Float hetGenotypeFreq, java.lang.Float altHomGenotypeFreq) {
    this.study = study;
    this.population = population;
    this.refAllele = refAllele;
    this.altAllele = altAllele;
    this.refAlleleFreq = refAlleleFreq;
    this.altAlleleFreq = altAlleleFreq;
    this.refHomGenotypeFreq = refHomGenotypeFreq;
    this.hetGenotypeFreq = hetGenotypeFreq;
    this.altHomGenotypeFreq = altHomGenotypeFreq;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return study;
    case 1: return population;
    case 2: return refAllele;
    case 3: return altAllele;
    case 4: return refAlleleFreq;
    case 5: return altAlleleFreq;
    case 6: return refHomGenotypeFreq;
    case 7: return hetGenotypeFreq;
    case 8: return altHomGenotypeFreq;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: study = (java.lang.String)value$; break;
    case 1: population = (java.lang.String)value$; break;
    case 2: refAllele = (java.lang.String)value$; break;
    case 3: altAllele = (java.lang.String)value$; break;
    case 4: refAlleleFreq = (java.lang.Float)value$; break;
    case 5: altAlleleFreq = (java.lang.Float)value$; break;
    case 6: refHomGenotypeFreq = (java.lang.Float)value$; break;
    case 7: hetGenotypeFreq = (java.lang.Float)value$; break;
    case 8: altHomGenotypeFreq = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'study' field.
   */
  public java.lang.String getStudy() {
    return study;
  }

  /**
   * Sets the value of the 'study' field.
   * @param value the value to set.
   */
  public void setStudy(java.lang.String value) {
    this.study = value;
  }

  /**
   * Gets the value of the 'population' field.
   */
  public java.lang.String getPopulation() {
    return population;
  }

  /**
   * Sets the value of the 'population' field.
   * @param value the value to set.
   */
  public void setPopulation(java.lang.String value) {
    this.population = value;
  }

  /**
   * Gets the value of the 'refAllele' field.
   */
  public java.lang.String getRefAllele() {
    return refAllele;
  }

  /**
   * Sets the value of the 'refAllele' field.
   * @param value the value to set.
   */
  public void setRefAllele(java.lang.String value) {
    this.refAllele = value;
  }

  /**
   * Gets the value of the 'altAllele' field.
   */
  public java.lang.String getAltAllele() {
    return altAllele;
  }

  /**
   * Sets the value of the 'altAllele' field.
   * @param value the value to set.
   */
  public void setAltAllele(java.lang.String value) {
    this.altAllele = value;
  }

  /**
   * Gets the value of the 'refAlleleFreq' field.
   */
  public java.lang.Float getRefAlleleFreq() {
    return refAlleleFreq;
  }

  /**
   * Sets the value of the 'refAlleleFreq' field.
   * @param value the value to set.
   */
  public void setRefAlleleFreq(java.lang.Float value) {
    this.refAlleleFreq = value;
  }

  /**
   * Gets the value of the 'altAlleleFreq' field.
   */
  public java.lang.Float getAltAlleleFreq() {
    return altAlleleFreq;
  }

  /**
   * Sets the value of the 'altAlleleFreq' field.
   * @param value the value to set.
   */
  public void setAltAlleleFreq(java.lang.Float value) {
    this.altAlleleFreq = value;
  }

  /**
   * Gets the value of the 'refHomGenotypeFreq' field.
   */
  public java.lang.Float getRefHomGenotypeFreq() {
    return refHomGenotypeFreq;
  }

  /**
   * Sets the value of the 'refHomGenotypeFreq' field.
   * @param value the value to set.
   */
  public void setRefHomGenotypeFreq(java.lang.Float value) {
    this.refHomGenotypeFreq = value;
  }

  /**
   * Gets the value of the 'hetGenotypeFreq' field.
   */
  public java.lang.Float getHetGenotypeFreq() {
    return hetGenotypeFreq;
  }

  /**
   * Sets the value of the 'hetGenotypeFreq' field.
   * @param value the value to set.
   */
  public void setHetGenotypeFreq(java.lang.Float value) {
    this.hetGenotypeFreq = value;
  }

  /**
   * Gets the value of the 'altHomGenotypeFreq' field.
   */
  public java.lang.Float getAltHomGenotypeFreq() {
    return altHomGenotypeFreq;
  }

  /**
   * Sets the value of the 'altHomGenotypeFreq' field.
   * @param value the value to set.
   */
  public void setAltHomGenotypeFreq(java.lang.Float value) {
    this.altHomGenotypeFreq = value;
  }

  /** Creates a new PopulationFrequency RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder();
  }
  
  /** Creates a new PopulationFrequency RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder newBuilder(org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder other) {
    return new org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder(other);
  }
  
  /** Creates a new PopulationFrequency RecordBuilder by copying an existing PopulationFrequency instance */
  public static org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder newBuilder(org.opencb.biodata.models.variant.avro.PopulationFrequency other) {
    return new org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder(other);
  }
  
  /**
   * RecordBuilder for PopulationFrequency instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PopulationFrequency>
    implements org.apache.avro.data.RecordBuilder<PopulationFrequency> {

    private java.lang.String study;
    private java.lang.String population;
    private java.lang.String refAllele;
    private java.lang.String altAllele;
    private float refAlleleFreq;
    private float altAlleleFreq;
    private java.lang.Float refHomGenotypeFreq;
    private java.lang.Float hetGenotypeFreq;
    private java.lang.Float altHomGenotypeFreq;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.PopulationFrequency.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.study)) {
        this.study = data().deepCopy(fields()[0].schema(), other.study);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.population)) {
        this.population = data().deepCopy(fields()[1].schema(), other.population);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.refAllele)) {
        this.refAllele = data().deepCopy(fields()[2].schema(), other.refAllele);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.altAllele)) {
        this.altAllele = data().deepCopy(fields()[3].schema(), other.altAllele);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.refAlleleFreq)) {
        this.refAlleleFreq = data().deepCopy(fields()[4].schema(), other.refAlleleFreq);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.altAlleleFreq)) {
        this.altAlleleFreq = data().deepCopy(fields()[5].schema(), other.altAlleleFreq);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.refHomGenotypeFreq)) {
        this.refHomGenotypeFreq = data().deepCopy(fields()[6].schema(), other.refHomGenotypeFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hetGenotypeFreq)) {
        this.hetGenotypeFreq = data().deepCopy(fields()[7].schema(), other.hetGenotypeFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.altHomGenotypeFreq)) {
        this.altHomGenotypeFreq = data().deepCopy(fields()[8].schema(), other.altHomGenotypeFreq);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PopulationFrequency instance */
    private Builder(org.opencb.biodata.models.variant.avro.PopulationFrequency other) {
            super(org.opencb.biodata.models.variant.avro.PopulationFrequency.SCHEMA$);
      if (isValidValue(fields()[0], other.study)) {
        this.study = data().deepCopy(fields()[0].schema(), other.study);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.population)) {
        this.population = data().deepCopy(fields()[1].schema(), other.population);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.refAllele)) {
        this.refAllele = data().deepCopy(fields()[2].schema(), other.refAllele);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.altAllele)) {
        this.altAllele = data().deepCopy(fields()[3].schema(), other.altAllele);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.refAlleleFreq)) {
        this.refAlleleFreq = data().deepCopy(fields()[4].schema(), other.refAlleleFreq);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.altAlleleFreq)) {
        this.altAlleleFreq = data().deepCopy(fields()[5].schema(), other.altAlleleFreq);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.refHomGenotypeFreq)) {
        this.refHomGenotypeFreq = data().deepCopy(fields()[6].schema(), other.refHomGenotypeFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hetGenotypeFreq)) {
        this.hetGenotypeFreq = data().deepCopy(fields()[7].schema(), other.hetGenotypeFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.altHomGenotypeFreq)) {
        this.altHomGenotypeFreq = data().deepCopy(fields()[8].schema(), other.altHomGenotypeFreq);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'study' field */
    public java.lang.String getStudy() {
      return study;
    }
    
    /** Sets the value of the 'study' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setStudy(java.lang.String value) {
      validate(fields()[0], value);
      this.study = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'study' field has been set */
    public boolean hasStudy() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'study' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearStudy() {
      study = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'population' field */
    public java.lang.String getPopulation() {
      return population;
    }
    
    /** Sets the value of the 'population' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setPopulation(java.lang.String value) {
      validate(fields()[1], value);
      this.population = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'population' field has been set */
    public boolean hasPopulation() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'population' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearPopulation() {
      population = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'refAllele' field */
    public java.lang.String getRefAllele() {
      return refAllele;
    }
    
    /** Sets the value of the 'refAllele' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setRefAllele(java.lang.String value) {
      validate(fields()[2], value);
      this.refAllele = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'refAllele' field has been set */
    public boolean hasRefAllele() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'refAllele' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearRefAllele() {
      refAllele = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'altAllele' field */
    public java.lang.String getAltAllele() {
      return altAllele;
    }
    
    /** Sets the value of the 'altAllele' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setAltAllele(java.lang.String value) {
      validate(fields()[3], value);
      this.altAllele = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'altAllele' field has been set */
    public boolean hasAltAllele() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'altAllele' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearAltAllele() {
      altAllele = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'refAlleleFreq' field */
    public java.lang.Float getRefAlleleFreq() {
      return refAlleleFreq;
    }
    
    /** Sets the value of the 'refAlleleFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setRefAlleleFreq(float value) {
      validate(fields()[4], value);
      this.refAlleleFreq = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'refAlleleFreq' field has been set */
    public boolean hasRefAlleleFreq() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'refAlleleFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearRefAlleleFreq() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'altAlleleFreq' field */
    public java.lang.Float getAltAlleleFreq() {
      return altAlleleFreq;
    }
    
    /** Sets the value of the 'altAlleleFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setAltAlleleFreq(float value) {
      validate(fields()[5], value);
      this.altAlleleFreq = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'altAlleleFreq' field has been set */
    public boolean hasAltAlleleFreq() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'altAlleleFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearAltAlleleFreq() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'refHomGenotypeFreq' field */
    public java.lang.Float getRefHomGenotypeFreq() {
      return refHomGenotypeFreq;
    }
    
    /** Sets the value of the 'refHomGenotypeFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setRefHomGenotypeFreq(java.lang.Float value) {
      validate(fields()[6], value);
      this.refHomGenotypeFreq = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'refHomGenotypeFreq' field has been set */
    public boolean hasRefHomGenotypeFreq() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'refHomGenotypeFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearRefHomGenotypeFreq() {
      refHomGenotypeFreq = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'hetGenotypeFreq' field */
    public java.lang.Float getHetGenotypeFreq() {
      return hetGenotypeFreq;
    }
    
    /** Sets the value of the 'hetGenotypeFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setHetGenotypeFreq(java.lang.Float value) {
      validate(fields()[7], value);
      this.hetGenotypeFreq = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'hetGenotypeFreq' field has been set */
    public boolean hasHetGenotypeFreq() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'hetGenotypeFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearHetGenotypeFreq() {
      hetGenotypeFreq = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'altHomGenotypeFreq' field */
    public java.lang.Float getAltHomGenotypeFreq() {
      return altHomGenotypeFreq;
    }
    
    /** Sets the value of the 'altHomGenotypeFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder setAltHomGenotypeFreq(java.lang.Float value) {
      validate(fields()[8], value);
      this.altHomGenotypeFreq = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'altHomGenotypeFreq' field has been set */
    public boolean hasAltHomGenotypeFreq() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'altHomGenotypeFreq' field */
    public org.opencb.biodata.models.variant.avro.PopulationFrequency.Builder clearAltHomGenotypeFreq() {
      altHomGenotypeFreq = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public PopulationFrequency build() {
      try {
        PopulationFrequency record = new PopulationFrequency();
        record.study = fieldSetFlags()[0] ? this.study : (java.lang.String) defaultValue(fields()[0]);
        record.population = fieldSetFlags()[1] ? this.population : (java.lang.String) defaultValue(fields()[1]);
        record.refAllele = fieldSetFlags()[2] ? this.refAllele : (java.lang.String) defaultValue(fields()[2]);
        record.altAllele = fieldSetFlags()[3] ? this.altAllele : (java.lang.String) defaultValue(fields()[3]);
        record.refAlleleFreq = fieldSetFlags()[4] ? this.refAlleleFreq : (java.lang.Float) defaultValue(fields()[4]);
        record.altAlleleFreq = fieldSetFlags()[5] ? this.altAlleleFreq : (java.lang.Float) defaultValue(fields()[5]);
        record.refHomGenotypeFreq = fieldSetFlags()[6] ? this.refHomGenotypeFreq : (java.lang.Float) defaultValue(fields()[6]);
        record.hetGenotypeFreq = fieldSetFlags()[7] ? this.hetGenotypeFreq : (java.lang.Float) defaultValue(fields()[7]);
        record.altHomGenotypeFreq = fieldSetFlags()[8] ? this.altHomGenotypeFreq : (java.lang.Float) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
